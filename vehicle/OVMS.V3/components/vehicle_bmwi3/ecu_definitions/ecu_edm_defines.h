
//
// Warning: don't edit - generated by generate_ecu_code.pl processing ../dev/edmei1.json: EDM 12: Electrical digital motor electronics (low voltage ECU)
// This generated code  makes it easier to process CANBUS messages from the EDM ecu in a BMW i3
//

#define I3_ECU_EDM_TX                                                0x06F112
#define I3_ECU_EDM_RX                                                0x0612F1

#define I3_PID_EDM_ENTLUEFTUNG_KUEHLSYSTEM                           0xA1D0
        // Ventilation routine for cooling system, only for F56 BEV / Entlüftungsroutine für Kühlsystem, nur für F56 BEV

    #define I3_RES_EDM_STAT_ROUTINE_STATUS                           (RXBUF_UCHAR(0))
    #define I3_RES_EDM_STAT_ROUTINE_STATUS_UNIT                      '0-n'
    #define I3_RES_EDM_STAT_ROUTINE_STATUS_TYPE                      unsigned char
        // Status of the routine. See table TAB_ENTLUEFTUNGSROUTINE_STATUS / Status der Routine. Siehe Tabelle
        // TAB_ENTLUEFTUNGSROUTINE_STATUS

    #define I3_RES_EDM_STAT_RESTZEIT_WERT                            (RXBUF_UINT(1))
    #define I3_RES_EDM_STAT_RESTZEIT_WERT_UNIT                       's'
    #define I3_RES_EDM_STAT_RESTZEIT_WERT_TYPE                       unsigned short
        // Remaining time of the routine in seconds / Restzeit der Routine in Sekunden

// Skipping ELUE on 0xADC2 which takes arguments

// Skipping ELUE_ZUSATZLUEFTER on 0xADC6 which takes arguments

// Skipping ELUE_RELAIS on 0xADC7 which takes arguments

// Skipping ELUE_ZUSATZLUEFTER_RELAIS on 0xADC8 which takes arguments

// Skipping EME_EWAP on 0xADF3 which takes arguments

#define I3_PID_EDM_MCAMOS                                            0xADFA
        // Return goods analysis of parts from the factory in series / Rückwarenanalyse von Teilen aus dem Werk in Serie

#define I3_PID_EDM_12V_NACHLADEHISTORIE_LOESCHEN                     0xAE02
        // Deleting the history memory for the last 4 charging processes of the 12V battery from the high-voltage battery
        // (ring memory with 4 records each) / Löschen des Historienspeichers für die letzen 4 Ladevorgänge der
        // 12V-Batterie aus der Hochvolt-Batterie (Ringspeicher mit je 4 Sätze)

#define I3_PID_EDM_12V_NACHLADEHISTOGRAMM_LOESCHEN                   0xAE03
        // Deletion of the histogram and counter of all charging processes of the 12V battery from the high-voltage
        // system / Löschen von Histogramm und Zähler aller Ladevorgänge der 12V-Batterie aus dem Hochvolt-Sys

#define I3_PID_EDM_EME_KAELTEMITTEL_ABSPERRVENTIL_ON_OFF             0xDE22
        // Status of the refrigerant shut-off valve; 0 = valve closed; 1 = valve open / Status des
        // Kältemittelabsperrventils; 0 = Ventil geschlossen; 1 = Ventil offen

    #define I3_RES_EDM_STAT_AKAV_ON                                  (RXBUF_UCHAR(0))
    #define I3_RES_EDM_STAT_AKAV_ON_UNIT                             '0/1'
    #define I3_RES_EDM_STAT_AKAV_ON_TYPE                             unsigned char
        // Status of the refrigerant shut-off valve; 0 = valve closed; 1 = valve open / Status des
        // Kältemittelabsperrventils; 0 = Ventil geschlossen; 1 = Ventil offen

// Skipping EME_KAELTEMITTEL_ABSPERRVENTIL on 0xDE23 which takes arguments

#define I3_PID_EDM_PEDALWERTGEBER                                    0xDE9C
        // Values from the pedal encoder / Werte vom Pedalwertgeber

    #define I3_RES_EDM_STAT_SPANNUNG_PEDALWERT1_WERT                 (RXBUF_UINT(0)*0.0049f)
    #define I3_RES_EDM_STAT_SPANNUNG_PEDALWERT1_WERT_UNIT            'V'
    #define I3_RES_EDM_STAT_SPANNUNG_PEDALWERT1_WERT_TYPE            float
        // Voltage measured at pedal encoder 1 / Spannung gemessen am Pedalwertgeber 1

    #define I3_RES_EDM_STAT_SPANNUNG_PEDALWERT2_WERT                 (RXBUF_UINT(2)*0.0049f)
    #define I3_RES_EDM_STAT_SPANNUNG_PEDALWERT2_WERT_UNIT            'V'
    #define I3_RES_EDM_STAT_SPANNUNG_PEDALWERT2_WERT_TYPE            float
        // Voltage measured at the pedal encoder 2 / Spannung gemessen am Pedalwertgeber 2

    #define I3_RES_EDM_STAT_PEDALWERT_WERT                           (RXBUF_UINT(4)*0.0625f)
    #define I3_RES_EDM_STAT_PEDALWERT_WERT_UNIT                      '%'
    #define I3_RES_EDM_STAT_PEDALWERT_WERT_TYPE                      float
        // Pedal value determined from pedal value sensors 1 and 2 / Aus Pedalwertgeber 1 und 2 ermittelter Pedalwert

#define I3_PID_EDM_REX_STATISTIK_BETRIEB                             0xDEE1
        // Reading out the operating statistics from the range extender motor / Auslesen der Betriebs-Statistik vom Range
        // Extender Motor

    #define I3_RES_EDM_STAT_BETRIEB_KILOMETER_WERT                   (RXBUF_UINT32(0)*0.001f)
    #define I3_RES_EDM_STAT_BETRIEB_KILOMETER_WERT_UNIT              'km'
    #define I3_RES_EDM_STAT_BETRIEB_KILOMETER_WERT_TYPE              float
        // Kilometers driven / Gefahrene Kilometer

    #define I3_RES_EDM_STAT_LAUFZEIT_WERT                            (RXBUF_UINT32(4))
    #define I3_RES_EDM_STAT_LAUFZEIT_WERT_UNIT                       's'
    #define I3_RES_EDM_STAT_LAUFZEIT_WERT_TYPE                       unsigned long
        // Runtime range extender motor / Laufzeit Range Extender Motor

    #define I3_RES_EDM_STAT_BETRIEB_ERSTSTARTS_WERT                  (RXBUF_UINT32(8))
    #define I3_RES_EDM_STAT_BETRIEB_ERSTSTARTS_WERT_TYPE             unsigned long
        // Number of first start processes / Anzahl der Erststart-Vorgänge

    #define I3_RES_EDM_STAT_BETRIEB_MSA_STARTS_WERT                  (RXBUF_UINT32(12))
    #define I3_RES_EDM_STAT_BETRIEB_MSA_STARTS_WERT_TYPE             unsigned long
        // Number of MSA starts / Anzahl MSA - Startvorgänge

    #define I3_RES_EDM_STAT_REX_BETRIEB_WARTUNG_STARTS_WERT          (RXBUF_UINT(16))
    #define I3_RES_EDM_STAT_REX_BETRIEB_WARTUNG_STARTS_WERT_TYPE     unsigned short
        // Number of special rex starts (exhaust-gas test or SGBD) / Number of special rex starts (exhaust-gas test or
        // SGBD)

    #define I3_RES_EDM_STAT_REX_BETRIEB_BEZUGSKILOMETER_WERT         (RXBUF_UINT32(18))
    #define I3_RES_EDM_STAT_REX_BETRIEB_BEZUGSKILOMETER_WERT_UNIT    'km'
    #define I3_RES_EDM_STAT_REX_BETRIEB_BEZUGSKILOMETER_WERT_TYPE    unsigned long
        // Kilometers driven (electric) that were recorded by the statistics / Gefahrene Kilometer (elektrisch) die von
        // der Statistik erfasst wurden

#define I3_PID_EDM_REX_STATISTIK_DREHZAHL                            0xDEE2
        // Reading out speed statistics from the range extender motor / Auslesen Drehzahl Statistik vom Range Extender
        // Motor

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_1_WERT              (RXBUF_UINT32(0)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_1_WERT_UNIT         's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_1_WERT_TYPE         float
        // Operating time in speed range 1 / Betriebszeit in Drehzahlbereich 1

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_2_WERT              (RXBUF_UINT32(4)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_2_WERT_UNIT         's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_2_WERT_TYPE         float
        // Operating time in speed range 2 / Betriebszeit in Drehzahlbereich 2

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_3_WERT              (RXBUF_UINT32(8)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_3_WERT_UNIT         's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_3_WERT_TYPE         float
        // Operating time in speed range 3 / Betriebszeit in Drehzahlbereich 3

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_4_WERT              (RXBUF_UINT32(12)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_4_WERT_UNIT         's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_4_WERT_TYPE         float
        // Operating time in speed range 4 / Betriebszeit in Drehzahlbereich 4

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_5_WERT              (RXBUF_UINT32(16)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_5_WERT_UNIT         's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_5_WERT_TYPE         float
        // Operating time in speed range 5 / Betriebszeit in Drehzahlbereich 5

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_6_WERT              (RXBUF_UINT32(20)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_6_WERT_UNIT         's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_6_WERT_TYPE         float
        // Operating time in speed range 6 / Betriebszeit in Drehzahlbereich 6

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_7_WERT              (RXBUF_UINT32(24)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_7_WERT_UNIT         's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_7_WERT_TYPE         float
        // Operating time in speed range 7 / Betriebszeit in Drehzahlbereich 7

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_8_WERT              (RXBUF_UINT32(28)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_8_WERT_UNIT         's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_8_WERT_TYPE         float
        // Operating time in speed range 8 / Betriebszeit in Drehzahlbereich 8

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_9_WERT              (RXBUF_UINT32(32)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_9_WERT_UNIT         's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_9_WERT_TYPE         float
        // Operating time in speed range 9 / Betriebszeit in Drehzahlbereich 9

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_10_WERT             (RXBUF_UINT32(36)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_10_WERT_UNIT        's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_10_WERT_TYPE        float
        // Operating time in speed range 10 / Betriebszeit in Drehzahlbereich 10

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_11_WERT             (RXBUF_UINT32(40)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_11_WERT_UNIT        's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_11_WERT_TYPE        float
        // Operating time in speed range 11 / Betriebszeit in Drehzahlbereich 11

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_12_WERT             (RXBUF_UINT32(44)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_12_WERT_UNIT        's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_12_WERT_TYPE        float
        // Operating time in speed range 12 / Betriebszeit in Drehzahlbereich 12

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_13_WERT             (RXBUF_UINT32(48)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_13_WERT_UNIT        's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_13_WERT_TYPE        float
        // Operating time in speed range 13 / Betriebszeit in Drehzahlbereich 13

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_14_WERT             (RXBUF_UINT32(52)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_14_WERT_UNIT        's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_14_WERT_TYPE        float
        // Operating time in speed range 14 / Betriebszeit in Drehzahlbereich 14

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_15_WERT             (RXBUF_UINT32(56)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_15_WERT_UNIT        's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_15_WERT_TYPE        float
        // Operating time in speed range 15 / Betriebszeit in Drehzahlbereich 15

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_16_WERT             (RXBUF_UINT32(60)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_16_WERT_UNIT        's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_16_WERT_TYPE        float
        // Operating time in speed range 16 / Betriebszeit in Drehzahlbereich 16

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_17_WERT             (RXBUF_UINT32(64)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_17_WERT_UNIT        's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_17_WERT_TYPE        float
        // Operating time in speed range 17 / Betriebszeit in Drehzahlbereich 17

    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_18_WERT             (RXBUF_UINT32(68)*0.1f)
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_18_WERT_UNIT        's'
    #define I3_RES_EDM_STAT_REX_ZEIT_IN_DREHZAHL_18_WERT_TYPE        float
        // Operating time in speed range 18 / Betriebszeit in Drehzahlbereich 18

// Skipping REX_STATISTIK_RESET on 0xDEE3 which takes arguments

// Skipping WARTUNGSLAUF_REX_FAELLIG on 0xDEFC which takes arguments

#define I3_PID_EDM_ZYKLISCHES_NACHLADEN_INFO                         0xDEFD
        // Reading out of important parameters of the last 4 processes of the cyclical reloading plus the last parking
        // process. / Auslesen von wichtigen Kenngrößen der letzten 4 Vorgänge des zyklischen Nachladens plus dem letzten
        // Parkvorgang.

    #define I3_RES_EDM_STAT_PARKEN_SYSTEMZEIT_WERT                   (RXBUF_UINT32(0))
    #define I3_RES_EDM_STAT_PARKEN_SYSTEMZEIT_WERT_UNIT              's'
    #define I3_RES_EDM_STAT_PARKEN_SYSTEMZEIT_WERT_TYPE              unsigned long
        // System time when parking / Systemzeit beim Parken

    #define I3_RES_EDM_STAT_PARKEN_KILOMETERSTAND_WERT               (RXBUF_UINT32(4))
    #define I3_RES_EDM_STAT_PARKEN_KILOMETERSTAND_WERT_UNIT          'km'
    #define I3_RES_EDM_STAT_PARKEN_KILOMETERSTAND_WERT_TYPE          unsigned long
        // Parking mileage / Kilometerstand beim Parken

    #define I3_RES_EDM_STAT_PARKEN_NV_BATTERIE_SOC_WERT              (RXBUF_UCHAR(8)*0.5f)
    #define I3_RES_EDM_STAT_PARKEN_NV_BATTERIE_SOC_WERT_UNIT         '%'
    #define I3_RES_EDM_STAT_PARKEN_NV_BATTERIE_SOC_WERT_TYPE         float
        // SOC 12V battery when parking / SOC 12V Batterie beim Parken

    #define I3_RES_EDM_STAT_E1_PARKEN_SYSTEMZEIT_WERT                (RXBUF_UINT32(9))
    #define I3_RES_EDM_STAT_E1_PARKEN_SYSTEMZEIT_WERT_UNIT           's'
    #define I3_RES_EDM_STAT_E1_PARKEN_SYSTEMZEIT_WERT_TYPE           unsigned long
        // 1st event (last): system time when parking / 1. Ereignis (letzte): Systemzeit beim Parken

    #define I3_RES_EDM_STAT_E1_PARKEN_KILOMETERSTAND_WERT            (RXBUF_UINT32(13))
    #define I3_RES_EDM_STAT_E1_PARKEN_KILOMETERSTAND_WERT_UNIT       'km'
    #define I3_RES_EDM_STAT_E1_PARKEN_KILOMETERSTAND_WERT_TYPE       unsigned long
        // 1st event (last): Mileage while parking / 1. Ereignis (letzte): Kilometerstand beim Parken

    #define I3_RES_EDM_STAT_E1_PARKEN_NV_BATTERIE_SOC_WERT           (RXBUF_UCHAR(17)*0.5f)
    #define I3_RES_EDM_STAT_E1_PARKEN_NV_BATTERIE_SOC_WERT_UNIT      '%'
    #define I3_RES_EDM_STAT_E1_PARKEN_NV_BATTERIE_SOC_WERT_TYPE      float
        // 1st event (last): SOC 12V battery when parking / 1. Ereignis (letzte): SOC 12V Batterie beim Parken

    #define I3_RES_EDM_STAT_E1_START_ZYKNL_SYSTEMZEIT_WERT           (RXBUF_UINT32(18))
    #define I3_RES_EDM_STAT_E1_START_ZYKNL_SYSTEMZEIT_WERT_UNIT      's'
    #define I3_RES_EDM_STAT_E1_START_ZYKNL_SYSTEMZEIT_WERT_TYPE      unsigned long
        // 1st event (last): System time at the start of the cyclical reloading / 1. Ereignis (letzte): Systemzeit beim
        // Start des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E1_START_ZYKNL_NV_BATTERIE_SOC_WERT      (RXBUF_UCHAR(22)*0.5f)
    #define I3_RES_EDM_STAT_E1_START_ZYKNL_NV_BATTERIE_SOC_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E1_START_ZYKNL_NV_BATTERIE_SOC_WERT_TYPE float
        // 1st event (last): SOC 12V battery when starting cyclical recharging / 1. Ereignis (letzte): SOC 12V Batterie
        // beim Start des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E1_START_ZYKNL_HV_BATTERIE_SOC_WERT      (RXBUF_UCHAR(23)*0.5f)
    #define I3_RES_EDM_STAT_E1_START_ZYKNL_HV_BATTERIE_SOC_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E1_START_ZYKNL_HV_BATTERIE_SOC_WERT_TYPE float
        // 1st event (last): SOC HV battery when starting cyclical recharging / 1. Ereignis (letzte): SOC HV-Batterie
        // beim Start des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E1_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT (RXBUF_UCHAR(24)-128.0)
    #define I3_RES_EDM_STAT_E1_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT_UNIT '°C'
    #define I3_RES_EDM_STAT_E1_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT_TYPE unsigned char
        // 1st event (last): Temperature of the 12V battery at the start of the cyclical recharging / 1. Ereignis
        // (letzte): Temperatur der 12V Batterie beim Start des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E1_LADEDAUER_WERT                        (RXBUF_UINT(25)+1.0)
    #define I3_RES_EDM_STAT_E1_LADEDAUER_WERT_UNIT                   's'
    #define I3_RES_EDM_STAT_E1_LADEDAUER_WERT_TYPE                   unsigned short
        // 1st event (last): Duration of the cyclical reloading / 1. Ereignis (letzte): Dauer des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E1_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT       (RXBUF_UCHAR(27)*0.5f)
    #define I3_RES_EDM_STAT_E1_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E1_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT_TYPE  float
        // 1st event (last): SOC 12V battery at the end of the cyclic recharge / 1. Ereignis (letzte): SOC 12V Batterie
        // beim Ende des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E1_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT       (RXBUF_UCHAR(28)*0.5f)
    #define I3_RES_EDM_STAT_E1_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E1_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT_TYPE  float
        // 1st event (last): SOC HV battery at the end of cyclical recharging / 1. Ereignis (letzte): SOC HV-Batterie
        // beim Ende des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E1_GRUND_LADEENDE                        (RXBUF_UCHAR(29))
    #define I3_RES_EDM_STAT_E1_GRUND_LADEENDE_UNIT                   '0-n'
    #define I3_RES_EDM_STAT_E1_GRUND_LADEENDE_TYPE                   unsigned char
        // 1st event (last): Reason for end of charging / 1. Ereignis (letzte): Grund Ladeende

    #define I3_RES_EDM_STAT_E1_ZYKNL_PROGNOSE_EIN                    (RXBUF_UCHAR(30))
    #define I3_RES_EDM_STAT_E1_ZYKNL_PROGNOSE_EIN_UNIT               '0/1'
    #define I3_RES_EDM_STAT_E1_ZYKNL_PROGNOSE_EIN_TYPE               unsigned char
        // 1st event (last): Forecast as to whether further cyclical NL possible (0 = no, 1 = yes) / 1. Ereignis
        // (letzte): Prognose, ob weiteres zykl. NL möglich (0 = nein, 1 = ja)

    #define I3_RES_EDM_STAT_E2_PARKEN_SYSTEMZEIT_WERT                (RXBUF_UINT32(31))
    #define I3_RES_EDM_STAT_E2_PARKEN_SYSTEMZEIT_WERT_UNIT           's'
    #define I3_RES_EDM_STAT_E2_PARKEN_SYSTEMZEIT_WERT_TYPE           unsigned long
        // 2nd event: system time when parking / 2. Ereignis: Systemzeit beim Parken

    #define I3_RES_EDM_STAT_E2_PARKEN_KILOMETERSTAND_WERT            (RXBUF_UINT32(35))
    #define I3_RES_EDM_STAT_E2_PARKEN_KILOMETERSTAND_WERT_UNIT       'km'
    #define I3_RES_EDM_STAT_E2_PARKEN_KILOMETERSTAND_WERT_TYPE       unsigned long
        // 2nd event: odometer reading while parking / 2. Ereignis: Kilometerstand beim Parken

    #define I3_RES_EDM_STAT_E2_PARKEN_NV_BATTERIE_SOC_WERT           (RXBUF_UCHAR(39)*0.5f)
    #define I3_RES_EDM_STAT_E2_PARKEN_NV_BATTERIE_SOC_WERT_UNIT      '%'
    #define I3_RES_EDM_STAT_E2_PARKEN_NV_BATTERIE_SOC_WERT_TYPE      float
        // 2nd event: SOC 12V battery when parking / 2. Ereignis: SOC 12V Batterie beim Parken

    #define I3_RES_EDM_STAT_E2_START_ZYKNL_SYSTEMZEIT_WERT           (RXBUF_UINT32(40))
    #define I3_RES_EDM_STAT_E2_START_ZYKNL_SYSTEMZEIT_WERT_UNIT      's'
    #define I3_RES_EDM_STAT_E2_START_ZYKNL_SYSTEMZEIT_WERT_TYPE      unsigned long
        // 2nd event: System time at the start of the cyclical reloading / 2. Ereignis: Systemzeit beim Start des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E2_START_ZYKNL_NV_BATTERIE_SOC_WERT      (RXBUF_UCHAR(44)*0.5f)
    #define I3_RES_EDM_STAT_E2_START_ZYKNL_NV_BATTERIE_SOC_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E2_START_ZYKNL_NV_BATTERIE_SOC_WERT_TYPE float
        // 2nd event: SOC 12V battery when starting cyclical recharging / 2. Ereignis: SOC 12V Batterie beim Start des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E2_START_ZYKNL_HV_BATTERIE_SOC_WERT      (RXBUF_UCHAR(45)*0.5f)
    #define I3_RES_EDM_STAT_E2_START_ZYKNL_HV_BATTERIE_SOC_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E2_START_ZYKNL_HV_BATTERIE_SOC_WERT_TYPE float
        // 2nd event: SOC HV battery when starting cyclical recharging / 2. Ereignis: SOC HV-Batterie beim Start des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E2_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT (RXBUF_UCHAR(46)-128.0)
    #define I3_RES_EDM_STAT_E2_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT_UNIT '°C'
    #define I3_RES_EDM_STAT_E2_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT_TYPE unsigned char
        // 2nd event: temperature of the 12V battery at the start of the cyclical recharge / 2. Ereignis: Temperatur der
        // 12V Batterie beim Start des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E2_LADEDAUER_WERT                        (RXBUF_UINT(47)+1.0)
    #define I3_RES_EDM_STAT_E2_LADEDAUER_WERT_UNIT                   's'
    #define I3_RES_EDM_STAT_E2_LADEDAUER_WERT_TYPE                   unsigned short
        // 2nd event: Duration of the cyclical reloading / 2. Ereignis: Dauer des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E2_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT       (RXBUF_UCHAR(49)*0.5f)
    #define I3_RES_EDM_STAT_E2_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E2_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT_TYPE  float
        // 2nd event: SOC 12V battery at the end of the cyclic recharge / 2. Ereignis: SOC 12V Batterie beim Ende des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E2_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT       (RXBUF_UCHAR(50)*0.5f)
    #define I3_RES_EDM_STAT_E2_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E2_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT_TYPE  float
        // 2nd event: SOC HV battery at the end of cyclical recharging / 2. Ereignis: SOC HV-Batterie beim Ende des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E2_GRUND_LADEENDE                        (RXBUF_UCHAR(51))
    #define I3_RES_EDM_STAT_E2_GRUND_LADEENDE_UNIT                   '0-n'
    #define I3_RES_EDM_STAT_E2_GRUND_LADEENDE_TYPE                   unsigned char
        // 2nd event: Reason for end of charging / 2. Ereignis: Grund Ladeende

    #define I3_RES_EDM_STAT_E2_ZYKNL_PROGNOSE_EIN                    (RXBUF_UCHAR(52))
    #define I3_RES_EDM_STAT_E2_ZYKNL_PROGNOSE_EIN_UNIT               '0/1'
    #define I3_RES_EDM_STAT_E2_ZYKNL_PROGNOSE_EIN_TYPE               unsigned char
        // 2nd event: prognosis whether further cyclical NL possible (0 = no, 1 = yes) / 2. Ereignis: Prognose, ob
        // weiteres zykl. NL möglich (0 = nein, 1 = ja)

    #define I3_RES_EDM_STAT_E3_PARKEN_SYSTEMZEIT_WERT                (RXBUF_UINT32(53))
    #define I3_RES_EDM_STAT_E3_PARKEN_SYSTEMZEIT_WERT_UNIT           's'
    #define I3_RES_EDM_STAT_E3_PARKEN_SYSTEMZEIT_WERT_TYPE           unsigned long
        // 3rd event: system time when parking / 3. Ereignis: Systemzeit beim Parken

    #define I3_RES_EDM_STAT_E3_PARKEN_KILOMETERSTAND_WERT            (RXBUF_UINT32(57))
    #define I3_RES_EDM_STAT_E3_PARKEN_KILOMETERSTAND_WERT_UNIT       'km'
    #define I3_RES_EDM_STAT_E3_PARKEN_KILOMETERSTAND_WERT_TYPE       unsigned long
        // 3rd event: mileage while parking / 3. Ereignis: Kilometerstand beim Parken

    #define I3_RES_EDM_STAT_E3_PARKEN_NV_BATTERIE_SOC_WERT           (RXBUF_UCHAR(61)*0.5f)
    #define I3_RES_EDM_STAT_E3_PARKEN_NV_BATTERIE_SOC_WERT_UNIT      '%'
    #define I3_RES_EDM_STAT_E3_PARKEN_NV_BATTERIE_SOC_WERT_TYPE      float
        // 3rd event: SOC 12V battery when parking / 3. Ereignis: SOC 12V Batterie beim Parken

    #define I3_RES_EDM_STAT_E3_START_ZYKNL_SYSTEMZEIT_WERT           (RXBUF_UINT32(62))
    #define I3_RES_EDM_STAT_E3_START_ZYKNL_SYSTEMZEIT_WERT_UNIT      's'
    #define I3_RES_EDM_STAT_E3_START_ZYKNL_SYSTEMZEIT_WERT_TYPE      unsigned long
        // 3rd event: System time at the start of the cyclical reloading / 3. Ereignis: Systemzeit beim Start des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E3_START_ZYKNL_NV_BATTERIE_SOC_WERT      (RXBUF_UCHAR(66)*0.5f)
    #define I3_RES_EDM_STAT_E3_START_ZYKNL_NV_BATTERIE_SOC_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E3_START_ZYKNL_NV_BATTERIE_SOC_WERT_TYPE float
        // 3rd event: SOC 12V battery at the start of cyclic recharging / 3. Ereignis: SOC 12V Batterie beim Start des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E3_START_ZYKNL_HV_BATTERIE_SOC_WERT      (RXBUF_UCHAR(67)*0.5f)
    #define I3_RES_EDM_STAT_E3_START_ZYKNL_HV_BATTERIE_SOC_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E3_START_ZYKNL_HV_BATTERIE_SOC_WERT_TYPE float
        // 3rd event: SOC HV battery when starting cyclical recharging / 3. Ereignis: SOC HV-Batterie beim Start des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E3_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT (RXBUF_UCHAR(68)-128.0)
    #define I3_RES_EDM_STAT_E3_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT_UNIT '°C'
    #define I3_RES_EDM_STAT_E3_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT_TYPE unsigned char
        // 3rd event: temperature of the 12V battery at the start of the cyclic recharge / 3. Ereignis: Temperatur der
        // 12V Batterie beim Start des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E3_LADEDAUER_WERT                        (RXBUF_UINT(69)+1.0)
    #define I3_RES_EDM_STAT_E3_LADEDAUER_WERT_UNIT                   's'
    #define I3_RES_EDM_STAT_E3_LADEDAUER_WERT_TYPE                   unsigned short
        // 3rd event: Duration of the cyclical reloading / 3. Ereignis: Dauer des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E3_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT       (RXBUF_UCHAR(71)*0.5f)
    #define I3_RES_EDM_STAT_E3_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E3_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT_TYPE  float
        // 3rd event: SOC 12V battery at the end of the cyclic recharge / 3. Ereignis: SOC 12V Batterie beim Ende des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E3_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT       (RXBUF_UCHAR(72)*0.5f)
    #define I3_RES_EDM_STAT_E3_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E3_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT_TYPE  float
        // 3rd event: SOC HV battery at the end of the cyclical recharge / 3. Ereignis: SOC HV-Batterie beim Ende des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E3_GRUND_LADEENDE                        (RXBUF_UCHAR(73))
    #define I3_RES_EDM_STAT_E3_GRUND_LADEENDE_UNIT                   '0-n'
    #define I3_RES_EDM_STAT_E3_GRUND_LADEENDE_TYPE                   unsigned char
        // 3rd event: Reason for end of charging / 3. Ereignis: Grund Ladeende

    #define I3_RES_EDM_STAT_E3_ZYKNL_PROGNOSE_EIN                    (RXBUF_UCHAR(74))
    #define I3_RES_EDM_STAT_E3_ZYKNL_PROGNOSE_EIN_UNIT               '0/1'
    #define I3_RES_EDM_STAT_E3_ZYKNL_PROGNOSE_EIN_TYPE               unsigned char
        // 3rd event: prognosis whether further cyclical NL possible (0 = no, 1 = yes) / 3. Ereignis: Prognose, ob
        // weiteres zykl. NL möglich (0 = nein, 1 = ja)

    #define I3_RES_EDM_STAT_E4_PARKEN_SYSTEMZEIT_WERT                (RXBUF_UINT32(75))
    #define I3_RES_EDM_STAT_E4_PARKEN_SYSTEMZEIT_WERT_UNIT           's'
    #define I3_RES_EDM_STAT_E4_PARKEN_SYSTEMZEIT_WERT_TYPE           unsigned long
        // 4th event: system time when parking / 4. Ereignis: Systemzeit beim Parken

    #define I3_RES_EDM_STAT_E4_PARKEN_KILOMETERSTAND_WERT            (RXBUF_UINT32(79))
    #define I3_RES_EDM_STAT_E4_PARKEN_KILOMETERSTAND_WERT_UNIT       'km'
    #define I3_RES_EDM_STAT_E4_PARKEN_KILOMETERSTAND_WERT_TYPE       unsigned long
        // 4th event: odometer reading while parking / 4. Ereignis: Kilometerstand beim Parken

    #define I3_RES_EDM_STAT_E4_PARKEN_NV_BATTERIE_SOC_WERT           (RXBUF_UCHAR(83)*0.5f)
    #define I3_RES_EDM_STAT_E4_PARKEN_NV_BATTERIE_SOC_WERT_UNIT      '%'
    #define I3_RES_EDM_STAT_E4_PARKEN_NV_BATTERIE_SOC_WERT_TYPE      float
        // 4th event: SOC 12V battery when parking / 4. Ereignis: SOC 12V Batterie beim Parken

    #define I3_RES_EDM_STAT_E4_START_ZYKNL_SYSTEMZEIT_WERT           (RXBUF_UINT32(84))
    #define I3_RES_EDM_STAT_E4_START_ZYKNL_SYSTEMZEIT_WERT_UNIT      's'
    #define I3_RES_EDM_STAT_E4_START_ZYKNL_SYSTEMZEIT_WERT_TYPE      unsigned long
        // 4th event: System time at the start of the cyclical reloading / 4. Ereignis: Systemzeit beim Start des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E4_START_ZYKNL_NV_BATTERIE_SOC_WERT      (RXBUF_UCHAR(88)*0.5f)
    #define I3_RES_EDM_STAT_E4_START_ZYKNL_NV_BATTERIE_SOC_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E4_START_ZYKNL_NV_BATTERIE_SOC_WERT_TYPE float
        // 4th event: SOC 12V battery at the start of cyclical recharging / 4. Ereignis: SOC 12V Batterie beim Start des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E4_START_ZYKNL_HV_BATTERIE_SOC_WERT      (RXBUF_UCHAR(89)*0.5f)
    #define I3_RES_EDM_STAT_E4_START_ZYKNL_HV_BATTERIE_SOC_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E4_START_ZYKNL_HV_BATTERIE_SOC_WERT_TYPE float
        // 4th event: SOC HV battery when starting cyclical recharging / 4. Ereignis: SOC HV-Batterie beim Start des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E4_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT (RXBUF_UCHAR(90)-128.0)
    #define I3_RES_EDM_STAT_E4_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT_UNIT '°C'
    #define I3_RES_EDM_STAT_E4_START_ZYKNL_NV_BATTERIE_TEMPERATUR_WERT_TYPE unsigned char
        // 4th event: temperature of the 12V battery at the start of cyclic recharging / 4. Ereignis: Temperatur der 12V
        // Batterie beim Start des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E4_LADEDAUER_WERT                        (RXBUF_UINT(91)+1.0)
    #define I3_RES_EDM_STAT_E4_LADEDAUER_WERT_UNIT                   's'
    #define I3_RES_EDM_STAT_E4_LADEDAUER_WERT_TYPE                   unsigned short
        // 4th event: Duration of the cyclical reloading / 4. Ereignis: Dauer des zyklischen Nachladens

    #define I3_RES_EDM_STAT_E4_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT       (RXBUF_UCHAR(93)*0.5f)
    #define I3_RES_EDM_STAT_E4_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E4_ENDE_ZYKNL_NV_BATTERIE_SOC_WERT_TYPE  float
        // 4th event: SOC 12V battery at the end of the cyclic recharge / 4. Ereignis: SOC 12V Batterie beim Ende des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E4_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT       (RXBUF_UCHAR(94)*0.5f)
    #define I3_RES_EDM_STAT_E4_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E4_ENDE_ZYKNL_HV_BATTERIE_SOC_WERT_TYPE  float
        // 4th event: SOC HV battery at the end of cyclic recharging / 4. Ereignis: SOC HV-Batterie beim Ende des
        // zyklischen Nachladens

    #define I3_RES_EDM_STAT_E4_GRUND_LADEENDE                        (RXBUF_UCHAR(95))
    #define I3_RES_EDM_STAT_E4_GRUND_LADEENDE_UNIT                   '0-n'
    #define I3_RES_EDM_STAT_E4_GRUND_LADEENDE_TYPE                   unsigned char
        // 4th event: Reason for end of charging / 4. Ereignis: Grund Ladeende

    #define I3_RES_EDM_STAT_E4_ZYKNL_PROGNOSE_EIN                    (RXBUF_UCHAR(96))
    #define I3_RES_EDM_STAT_E4_ZYKNL_PROGNOSE_EIN_UNIT               '0/1'
    #define I3_RES_EDM_STAT_E4_ZYKNL_PROGNOSE_EIN_TYPE               unsigned char
        // 4th event: prognosis whether further cyclical NL possible (0 = no, 1 = yes) / 4. Ereignis: Prognose, ob
        // weiteres zykl. NL möglich (0 = nein, 1 = ja)

#define I3_PID_EDM_ZYKLISCHES_NACHLADEN_HISTOGRAMM                   0xDEFE
        // Reading out the histograms over the service life up to the start of the cyclical reloading and the loading
        // times of the cyclical reloading processes / Auslesen der Histogramme über die Standzeit bis zum Beginn des
        // zyklischen Nachladens und der Ladedauern der zyklischen Nachladevorgänge

    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_A_WERT     (RXBUF_UCHAR(0))
    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_A_WERT_TYPE unsigned char
        // Number of idle times until the beginning of the cyclical reloading in area A. Area A <= K_STDZEITLADEHISTGRZ1
        // (days) (count up to 255, then no count, value is retained) / Anzahl der Standzeiten bis zum Beginn des
        // zyklischen Nachladens im Bereich A. Bereich A <= K_STDZEITLADEHISTGRZ1 (Tage) (Zählung bis 255, danach keine
        // Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_B_WERT     (RXBUF_UCHAR(1))
    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_B_WERT_TYPE unsigned char
        // Number of idle times until the start of the cyclical reloading in area B. K_STDZEITLADEHISTGRZ1 (days) <area B
        // <= K_STDZEITLADEHISTGRZ2 (days) (count up to 255, after that no count, value is retained) / Anzahl der
        // Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich B.  K_STDZEITLADEHISTGRZ1 (Tage) < Bereich B
        // <= K_STDZEITLADEHISTGRZ2 (Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_C_WERT     (RXBUF_UCHAR(2))
    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_C_WERT_TYPE unsigned char
        // Number of idle times until the start of the cyclical reloading in area B. K_STDZEITLADEHISTGRZ2 (days) <area C
        // <= K_STDZEITLADEHISTGRZ3 (days) (count up to 255, after that no count, value is retained) / Anzahl der
        // Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich B.  K_STDZEITLADEHISTGRZ2 (Tage) < Bereich C
        // <= K_STDZEITLADEHISTGRZ3 (Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_D_WERT     (RXBUF_UCHAR(3))
    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_D_WERT_TYPE unsigned char
        // Number of idle times until the beginning of the cyclical reloading in area D. K_STDZEITLADEHISTGRZ3 (days)
        // <area D <= K_STDZEITLADEHISTGRZ4 (days) (count up to 255, after that no count, value is retained) / Anzahl der
        // Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich D.  K_STDZEITLADEHISTGRZ3 (Tage) < Bereich D
        // <= K_STDZEITLADEHISTGRZ4 (Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_E_WERT     (RXBUF_UCHAR(4))
    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_E_WERT_TYPE unsigned char
        // Number of idle times until the beginning of the cyclical reloading in area E. K_STDZEITLADEHISTGRZ4 (days)
        // <area E <= K_STDZEITLADEHISTGRZ5 (days) (count up to 255, after that no count, value is retained) / Anzahl der
        // Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich E.  K_STDZEITLADEHISTGRZ4 (Tage) < Bereich E
        // <= K_STDZEITLADEHISTGRZ5 (Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_F_WERT     (RXBUF_UCHAR(5))
    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_F_WERT_TYPE unsigned char
        // Number of idle times until the start of the cyclical reloading in the area F. K_STDZEITLADEHISTGRZ5 (days)
        // <area F <= K_STDZEITLADEHISTGRZ6 (days) (count up to 255, after that no count, value is retained) / Anzahl der
        // Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich F.  K_STDZEITLADEHISTGRZ5 (Tage) < Bereich F
        // <= K_STDZEITLADEHISTGRZ6 (Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_G_WERT     (RXBUF_UCHAR(6))
    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_G_WERT_TYPE unsigned char
        // Number of idle times until the start of the cyclical reloading in area G. K_STDZEITLADEHISTGRZ6 (days) <area G
        // <= K_STDZEITLADEHISTGRZ7 (days) (count up to 255, after that no count, value is retained) / Anzahl der
        // Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich G.  K_STDZEITLADEHISTGRZ6 (Tage) < Bereich G
        // <= K_STDZEITLADEHISTGRZ7 (Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_H_WERT     (RXBUF_UCHAR(7))
    #define I3_RES_EDM_STAT_STANDZEIT_START_ZYKNL_BEREICH_H_WERT_TYPE unsigned char
        // Number of idle times until the beginning of the cyclical reloading in area H. K_STDZEITLADEHISTGRZ7 (days)
        // <area H (count up to 255, then no count, value is retained) / Anzahl der Standzeiten bis zum Beginn des
        // zyklischen Nachladens im Bereich H.  K_STDZEITLADEHISTGRZ7 (Tage) < Bereich H  (Zählung bis 255, danach keine
        // Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_A_WERT              (RXBUF_UCHAR(8))
    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_A_WERT_TYPE         unsigned char
        // Number of loading times of the cyclical reloading in area A. Area A <= K_NLDDAUERHISTGRZ1 (days) (counting up
        // to 255, then no counting, value is retained) / Anzahl der Ladungsdauer des zyklischen Nachladens im Bereich A.
        // Bereich A <= K_NLDDAUERHISTGRZ1 (Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_B_WERT              (RXBUF_UCHAR(9))
    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_B_WERT_TYPE         unsigned char
        // Number of loading times of the cyclical reloading in area B. K_NLDDAUERHISTGRZ1 (days) <area B <=
        // K_NLDDAUERHISTGRZ2 (days) (count up to 255, then no count, value is retained) / Anzahl der Ladungsdauer des
        // zyklischen Nachladens im Bereich B. K_NLDDAUERHISTGRZ1 (Tage) < Bereich B <= K_NLDDAUERHISTGRZ2 (Tage)
        // (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_C_WERT              (RXBUF_UCHAR(10))
    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_C_WERT_TYPE         unsigned char
        // Number of loading times of the cyclical reloading in area C. K_NLDDAUERHISTGRZ2 (days) <area C <=
        // K_NLDDAUERHISTGRZ3 (days) (count up to 255, then no count, value is retained) / Anzahl der Ladungsdauer des
        // zyklischen Nachladens im Bereich C. K_NLDDAUERHISTGRZ2 (Tage) < Bereich C <= K_NLDDAUERHISTGRZ3 (Tage)
        // (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_D_WERT              (RXBUF_UCHAR(11))
    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_D_WERT_TYPE         unsigned char
        // Number of loading times of the cyclical reloading in area D. K_NLDDAUERHISTGRZ3 (days) <area D <=
        // K_NLDDAUERHISTGRZ4 (days) (count up to 255, after that no count, value is retained) / Anzahl der Ladungsdauer
        // des zyklischen Nachladens im Bereich D. K_NLDDAUERHISTGRZ3 (Tage) < Bereich D <= K_NLDDAUERHISTGRZ4 (Tage)
        // (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_E_WERT              (RXBUF_UCHAR(12))
    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_E_WERT_TYPE         unsigned char
        // Number of loading times of the cyclical reloading in area E. K_NLDDAUERHISTGRZ4 (days) <area E <=
        // K_NLDDAUERHISTGRZ5 (days) (count up to 255, then no count, value is retained) / Anzahl der Ladungsdauer des
        // zyklischen Nachladens im Bereich E. K_NLDDAUERHISTGRZ4 (Tage) < Bereich E <= K_NLDDAUERHISTGRZ5 (Tage)
        // (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_F_WERT              (RXBUF_UCHAR(13))
    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_F_WERT_TYPE         unsigned char
        // Number of loading times of the cyclical reloading in area F. K_NLDDAUERHISTGRZ5 (days) <area F <=
        // K_NLDDAUERHISTGRZ6 (days) (count up to 255, then no count, value is retained) / Anzahl der Ladungsdauer des
        // zyklischen Nachladens im Bereich F. K_NLDDAUERHISTGRZ5 (Tage) < Bereich F <= K_NLDDAUERHISTGRZ6 (Tage)
        // (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_G_WERT              (RXBUF_UCHAR(14))
    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_G_WERT_TYPE         unsigned char
        // Number of loading times of the cyclical reloading in area G. K_NLDDAUERHISTGRZ6 (days) <area G <=
        // K_NLDDAUERHISTGRZ7 (days) (count up to 255, then no count, value is retained) / Anzahl der Ladungsdauer des
        // zyklischen Nachladens im Bereich G. K_NLDDAUERHISTGRZ6 (Tage) < Bereich G <= K_NLDDAUERHISTGRZ7 (Tage)
        // (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_H_WERT              (RXBUF_UCHAR(15))
    #define I3_RES_EDM_STAT_LADUNGSDAUER_BEREICH_H_WERT_TYPE         unsigned char
        // Number of loading times of the cyclical reloading in area H. K_NLDDAUERHISTGRZ7 (days) <area H (count up to
        // 255, then no count, value is retained) / Anzahl der Ladungsdauer des zyklischen Nachladens im Bereich H.
        // K_NLDDAUERHISTGRZ7 (Tage) < Bereich H  (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

// Skipping CBS_NV_RESET on 0xDF4E which takes arguments

#define I3_PID_EDM_REX_STATISTIK_TEMPERATUR                          0xDF53
        // Temperature statistics from the REX burner / Temperaturstatistik vom REX-Verbrenner

    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOR_KUEHLMITTEL_1_WERT  (RXBUF_UINT32(0)*0.1f)
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOR_KUEHLMITTEL_1_WERT_UNIT 's'
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOR_KUEHLMITTEL_1_WERT_TYPE float
        // Temperature statistics REX coolant 1 / Temperaturstatistik REX Kühlmittel 1

    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOR_KUEHLMITTEL_2_WERT  (RXBUF_UINT32(4)*0.1f)
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOR_KUEHLMITTEL_2_WERT_UNIT 's'
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOR_KUEHLMITTEL_2_WERT_TYPE float
        // Temperature statistics REX coolant 2 / Temperaturstatistik REX Kühlmittel 2

    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOR_KUEHLMITTEL_3_WERT  (RXBUF_UINT32(8)*0.1f)
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOR_KUEHLMITTEL_3_WERT_UNIT 's'
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOR_KUEHLMITTEL_3_WERT_TYPE float
        // Temperature statistics REX coolant 3 / Temperaturstatistik REX Kühlmittel 3

    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOROEL_1_WERT           (RXBUF_UINT32(12)*0.1f)
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOROEL_1_WERT_UNIT      's'
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOROEL_1_WERT_TYPE      float
        // Temperature statistics REX engine oil 1 / Temperaturstatistik REX Motoröl 1

    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOROEL_2_WERT           (RXBUF_UINT32(16)*0.1f)
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOROEL_2_WERT_UNIT      's'
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOROEL_2_WERT_TYPE      float
        // Temperature statistics REX engine oil 2 / Temperaturstatistik REX Motoröl 2

    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOROEL_3_WERT           (RXBUF_UINT32(20)*0.1f)
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOROEL_3_WERT_UNIT      's'
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_MOTOROEL_3_WERT_TYPE      float
        // Temperature statistics REX engine oil 3 / Temperaturstatistik REX Motoröl 3

    #define I3_RES_EDM_STAT_REX_TEMPERATUR_UMGEBUNG_1_WERT           (RXBUF_UINT32(24)*0.1f)
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_UMGEBUNG_1_WERT_UNIT      's'
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_UMGEBUNG_1_WERT_TYPE      float
        // Temperature statistics ambient temperature 1 / Temperaturstatistik Umgebungstemperatur 1

    #define I3_RES_EDM_STAT_REX_TEMPERATUR_UMGEBUNG_2_WERT           (RXBUF_UINT32(28)*0.1f)
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_UMGEBUNG_2_WERT_UNIT      's'
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_UMGEBUNG_2_WERT_TYPE      float
        // Temperature statistics ambient temperature 2 / Temperaturstatistik Umgebungstemperatur 2

    #define I3_RES_EDM_STAT_REX_TEMPERATUR_UMGEBUNG_3_WERT           (RXBUF_UINT32(32)*0.1f)
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_UMGEBUNG_3_WERT_UNIT      's'
    #define I3_RES_EDM_STAT_REX_TEMPERATUR_UMGEBUNG_3_WERT_TYPE      float
        // Temperature statistics ambient temperature 3 / Temperaturstatistik Umgebungstemperatur 3

#define I3_PID_EDM_REX_STATISTIK_KILOMETER_KLASSEN                   0xDF54
        // Statistics with the number of trips in the respective kilometer classes in REX operation. / Statistik mit
        // Anzahl der Fahrten in den jeweiligen Kilometerklassen im REX-Betrieb.

    #define I3_RES_EDM_STAT_REX_FAHRT_KILOMETER_KLASSE_1_WERT        (RXBUF_UINT(0))
    #define I3_RES_EDM_STAT_REX_FAHRT_KILOMETER_KLASSE_1_WERT_TYPE   unsigned short
        // Number of REX cycles in kilometers class 1 / Anzahl REX Zyklen in Kilometer Klasse 1

    #define I3_RES_EDM_STAT_REX_FAHRT_KILOMETER_KLASSE_2_WERT        (RXBUF_UINT(2))
    #define I3_RES_EDM_STAT_REX_FAHRT_KILOMETER_KLASSE_2_WERT_TYPE   unsigned short
        // Number of REX cycles in kilometers class 2 / Anzahl REX Zyklen in Kilometer Klasse 2

    #define I3_RES_EDM_STAT_REX_FAHRT_KILOMETER_KLASSE_3_WERT        (RXBUF_UINT(4))
    #define I3_RES_EDM_STAT_REX_FAHRT_KILOMETER_KLASSE_3_WERT_TYPE   unsigned short
        // Number of REX cycles in kilometers class 3 / Anzahl REX Zyklen in Kilometer Klasse 3

    #define I3_RES_EDM_STAT_REX_FAHRT_KILOMETER_KLASSE_4_WERT        (RXBUF_UINT(6))
    #define I3_RES_EDM_STAT_REX_FAHRT_KILOMETER_KLASSE_4_WERT_TYPE   unsigned short
        // Number of REX cycles in kilometers class 4 / Anzahl REX Zyklen in Kilometer Klasse 4

    #define I3_RES_EDM_STAT_REX_FAHRT_KILOMETER_KLASSE_5_WERT        (RXBUF_UINT(8))
    #define I3_RES_EDM_STAT_REX_FAHRT_KILOMETER_KLASSE_5_WERT_TYPE   unsigned short
        // Number of REX cycles in kilometers class 5 / Anzahl REX Zyklen in Kilometer Klasse 5

#define I3_PID_EDM_REX_STATISTIK_ZYKLEN                              0xDF55
        // Driving cycle counter / Zähler für Fahrzyklen

    #define I3_RES_EDM_STAT_ZYKLEN_GESAMT_WERT                       (RXBUF_UINT(0))
    #define I3_RES_EDM_STAT_ZYKLEN_GESAMT_WERT_TYPE                  unsigned short
        // Counter for all driving cycles / Zähler für alle Fahrzyklen

    #define I3_RES_EDM_STAT_ZYKLEN_REX_BETRIEB_WERT                  (RXBUF_UINT(2))
    #define I3_RES_EDM_STAT_ZYKLEN_REX_BETRIEB_WERT_TYPE             unsigned short
        // Counter for all driving cycles where the REX has run. / Zähler für alle Fahrzyklen, wo der REX gelaufen ist.

#define I3_PID_EDM_REX_STATISTIK_SOC_KILOMETER_KLASSEN               0xDF56
        // Number of REX starts after X kilometers with Y SOC at the start of the journey / Anzahl der REX-Starts nach
        // X-Kilometer mit Y SOC bei Fahrtbeginn

    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_1_WERT                (RXBUF_UINT(0))
    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_1_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 1, electrically driven kilometers class 1 / Anzahl REX Starts für SOC
        // Klasse 1, elektrisch gefahrene Kilometer Klasse 1

    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_1_WERT                (RXBUF_UINT(2))
    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_1_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 2, electrically driven kilometers class 1 / Anzahl REX Starts für SOC
        // Klasse 2, elektrisch gefahrene Kilometer Klasse 1

    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_1_WERT                (RXBUF_UINT(4))
    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_1_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 3, electrically driven kilometers class 1 / Anzahl REX Starts für SOC
        // Klasse 3, elektrisch gefahrene Kilometer Klasse 1

    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_1_WERT                (RXBUF_UINT(6))
    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_1_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 4, electrically driven kilometers class 1 / Anzahl REX Starts für SOC
        // Klasse 4, elektrisch gefahrene Kilometer Klasse 1

    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_2_WERT                (RXBUF_UINT(8))
    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_2_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 1, electrically driven kilometers class 2 / Anzahl REX Starts für SOC
        // Klasse 1, elektrisch gefahrene Kilometer Klasse 2

    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_2_WERT                (RXBUF_UINT(10))
    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_2_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 2, electrically driven kilometers class 2 / Anzahl REX Starts für SOC
        // Klasse 2, elektrisch gefahrene Kilometer Klasse 2

    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_2_WERT                (RXBUF_UINT(12))
    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_2_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 3, electrically driven kilometers class 2 / Anzahl REX Starts für SOC
        // Klasse 3, elektrisch gefahrene Kilometer Klasse 2

    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_2_WERT                (RXBUF_UINT(14))
    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_2_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 4, electrically driven kilometers class 2 / Anzahl REX Starts für SOC
        // Klasse 4, elektrisch gefahrene Kilometer Klasse 2

    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_3_WERT                (RXBUF_UINT(16))
    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_3_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 1, electrically driven kilometers class 3 / Anzahl REX Starts für SOC
        // Klasse 1, elektrisch gefahrene Kilometer Klasse 3

    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_3_WERT                (RXBUF_UINT(18))
    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_3_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 2, electrically driven kilometers class 3 / Anzahl REX Starts für SOC
        // Klasse 2, elektrisch gefahrene Kilometer Klasse 3

    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_3_WERT                (RXBUF_UINT(20))
    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_3_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 3, electrically driven kilometers class 3 / Anzahl REX Starts für SOC
        // Klasse 3, elektrisch gefahrene Kilometer Klasse 3

    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_3_WERT                (RXBUF_UINT(22))
    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_3_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 4, electrically driven kilometers class 3 / Anzahl REX Starts für SOC
        // Klasse 4, elektrisch gefahrene Kilometer Klasse 3

    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_4_WERT                (RXBUF_UINT(24))
    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_4_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 1, electrically driven kilometers class 4 / Anzahl REX Starts für SOC
        // Klasse 1, elektrisch gefahrene Kilometer Klasse 4

    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_4_WERT                (RXBUF_UINT(26))
    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_4_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 2, electrically driven kilometers class 4 / Anzahl REX Starts für SOC
        // Klasse 2, elektrisch gefahrene Kilometer Klasse 4

    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_4_WERT                (RXBUF_UINT(28))
    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_4_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 3, electrically driven kilometers class 4 / Anzahl REX Starts für SOC
        // Klasse 3, elektrisch gefahrene Kilometer Klasse 4

    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_4_WERT                (RXBUF_UINT(30))
    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_4_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 4, electrically driven kilometers class 4 / Anzahl REX Starts für SOC
        // Klasse 4, elektrisch gefahrene Kilometer Klasse 4

    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_5_WERT                (RXBUF_UINT(32))
    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_5_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 1, electrically driven kilometers class 5 / Anzahl REX Starts für SOC
        // Klasse 1, elektrisch gefahrene Kilometer Klasse 5

    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_5_WERT                (RXBUF_UINT(34))
    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_5_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 2, electrically driven kilometers class 5 / Anzahl REX Starts für SOC
        // Klasse 2, elektrisch gefahrene Kilometer Klasse 5

    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_5_WERT                (RXBUF_UINT(36))
    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_5_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 3, electrically driven kilometers class 5 / Anzahl REX Starts für SOC
        // Klasse 3, elektrisch gefahrene Kilometer Klasse 5

    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_5_WERT                (RXBUF_UINT(38))
    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_5_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 4, electrically driven kilometers class 5 / Anzahl REX Starts für SOC
        // Klasse 4, elektrisch gefahrene Kilometer Klasse 5

    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_6_WERT                (RXBUF_UINT(40))
    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_6_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 1, electrically driven kilometers class 6 / Anzahl REX Starts für SOC
        // Klasse 1, elektrisch gefahrene Kilometer Klasse 6

    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_6_WERT                (RXBUF_UINT(42))
    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_6_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 2, electrically driven kilometers class 6 / Anzahl REX Starts für SOC
        // Klasse 2, elektrisch gefahrene Kilometer Klasse 6

    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_6_WERT                (RXBUF_UINT(44))
    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_6_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 3, electrically driven kilometers class 6 / Anzahl REX Starts für SOC
        // Klasse 3, elektrisch gefahrene Kilometer Klasse 6

    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_6_WERT                (RXBUF_UINT(46))
    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_6_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 4, electrically driven kilometers class 6 / Anzahl REX Starts für SOC
        // Klasse 4, elektrisch gefahrene Kilometer Klasse 6

    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_7_WERT                (RXBUF_UINT(48))
    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_7_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 1, electrically driven kilometers class 7 / Anzahl REX Starts für SOC
        // Klasse 1, elektrisch gefahrene Kilometer Klasse 7

    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_7_WERT                (RXBUF_UINT(50))
    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_7_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 2, electrically driven kilometers class 7 / Anzahl REX Starts für SOC
        // Klasse 2, elektrisch gefahrene Kilometer Klasse 7

    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_7_WERT                (RXBUF_UINT(52))
    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_7_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 3, electrically driven kilometers class 7 / Anzahl REX Starts für SOC
        // Klasse 3, elektrisch gefahrene Kilometer Klasse 7

    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_7_WERT                (RXBUF_UINT(54))
    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_7_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 4, electrically driven kilometers class 7 / Anzahl REX Starts für SOC
        // Klasse 4, elektrisch gefahrene Kilometer Klasse 7

    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_8_WERT                (RXBUF_UINT(56))
    #define I3_RES_EDM_STAT_REX_START_SOC_1_KM_8_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 1, electrically driven kilometers class 8 / Anzahl REX Starts für SOC
        // Klasse 1, elektrisch gefahrene Kilometer Klasse 8

    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_8_WERT                (RXBUF_UINT(58))
    #define I3_RES_EDM_STAT_REX_START_SOC_2_KM_8_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 2, electrically driven kilometers class 8 / Anzahl REX Starts für SOC
        // Klasse 2, elektrisch gefahrene Kilometer Klasse 8

    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_8_WERT                (RXBUF_UINT(60))
    #define I3_RES_EDM_STAT_REX_START_SOC_3_KM_8_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 3, electrically driven kilometers class 8 / Anzahl REX Starts für SOC
        // Klasse 3, elektrisch gefahrene Kilometer Klasse 8

    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_8_WERT                (RXBUF_UINT(62))
    #define I3_RES_EDM_STAT_REX_START_SOC_4_KM_8_WERT_TYPE           unsigned short
        // Number of REX starts for SOC class 4, electrically driven kilometers class 8 / Anzahl REX Starts für SOC
        // Klasse 4, elektrisch gefahrene Kilometer Klasse 8

#define I3_PID_EDM_REX_STATISTIK_ZAEHLER                             0xDF5E
        // Query meter statistics from the REX network / Abfrage Zählerstatistik vom REX-Verbund

    #define I3_RES_EDM_STAT_REX_BETRIEB_LANGZEITSTART_IO_WERT        (RXBUF_UINT(0))
    #define I3_RES_EDM_STAT_REX_BETRIEB_LANGZEITSTART_IO_WERT_TYPE   unsigned short
        // Number of successfully completed long-term starts / Anzahl erfolgreich durchgelaufene Langzeitstarts

    #define I3_RES_EDM_STAT_REX_BETRIEB_LANGZEITSTART_NIO_WERT       (RXBUF_UINT(2))
    #define I3_RES_EDM_STAT_REX_BETRIEB_LANGZEITSTART_NIO_WERT_TYPE  unsigned short
        // Number of canceled long-term starts / Anzahl abgebrochene Langzeitstarts

    #define I3_RES_EDM_STAT_REX_BETRIEB_TANK_LEER_STOPS_WERT         (RXBUF_UINT(4))
    #define I3_RES_EDM_STAT_REX_BETRIEB_TANK_LEER_STOPS_WERT_TYPE    unsigned short
        // Number of REX deposits due to an empty tank / Anzahl REX-Ablegen aufgrund eines leeren Tanks

#define I3_PID_EDM_STEUERN_INTERLOCK                                 0x1061
        // LOCKED ECU / LOCKED ECU

#define I3_PID_EDM_12V_NACHLADEHISTORIE                              0x409D
        // History with important parameters of the 12V recharge function. Last 4 records / Historie mit wichtigen
        // Kenngrößen der 12V Nachladefunktion. Letzte 4 Datensätze

    #define I3_RES_EDM_STAT_KM_STAND_WERT                            (RXBUF_UINT32(0))
    #define I3_RES_EDM_STAT_KM_STAND_WERT_UNIT                       'km'
    #define I3_RES_EDM_STAT_KM_STAND_WERT_TYPE                       unsigned long
        // Parking mileage / Kilometerstand beim Parken

    #define I3_RES_EDM_STAT_SYSTEMZEIT_PARKEN_WERT                   (RXBUF_UINT32(4))
    #define I3_RES_EDM_STAT_SYSTEMZEIT_PARKEN_WERT_UNIT              's'
    #define I3_RES_EDM_STAT_SYSTEMZEIT_PARKEN_WERT_TYPE              unsigned long
        // Timestamp when parking / Zeitstempel beim Parken

    #define I3_RES_EDM_STAT_12V_BATTERIE_SOC_PARKEN_WERT             (RXBUF_UCHAR(8))
    #define I3_RES_EDM_STAT_12V_BATTERIE_SOC_PARKEN_WERT_UNIT        '%'
    #define I3_RES_EDM_STAT_12V_BATTERIE_SOC_PARKEN_WERT_TYPE        unsigned char
        // Charge status of the 12V battery when the vehicle is put down / Ladezustand der 12V-Batterie beim Ablegen des
        // Fahrzeuges

    #define I3_RES_EDM_STAT_E1_KM_STAND_WERT                         (RXBUF_UINT32(9))
    #define I3_RES_EDM_STAT_E1_KM_STAND_WERT_UNIT                    'km'
    #define I3_RES_EDM_STAT_E1_KM_STAND_WERT_TYPE                    unsigned long
        // Sentence 1 (last) - mileage when parking / Satz 1 (letzter) - Kilometerstand beim Parken

    #define I3_RES_EDM_STAT_E2_KM_STAND_WERT                         (RXBUF_UINT32(13))
    #define I3_RES_EDM_STAT_E2_KM_STAND_WERT_UNIT                    'km'
    #define I3_RES_EDM_STAT_E2_KM_STAND_WERT_TYPE                    unsigned long
        // Sentence 2 - Mileage when parking / Satz 2 - Kilometerstand beim Parken

    #define I3_RES_EDM_STAT_E3_KM_STAND_WERT                         (RXBUF_UINT32(17))
    #define I3_RES_EDM_STAT_E3_KM_STAND_WERT_UNIT                    'km'
    #define I3_RES_EDM_STAT_E3_KM_STAND_WERT_TYPE                    unsigned long
        // Sentence 3 - Mileage when parking / Satz 3 - Kilometerstand beim Parken

    #define I3_RES_EDM_STAT_E4_KM_STAND_WERT                         (RXBUF_UINT32(21))
    #define I3_RES_EDM_STAT_E4_KM_STAND_WERT_UNIT                    'km'
    #define I3_RES_EDM_STAT_E4_KM_STAND_WERT_TYPE                    unsigned long
        // Sentence 4 - Mileage when parking / Satz 4 - Kilometerstand beim Parken

    #define I3_RES_EDM_STAT_E1_SYSTEMZEIT_PARKEN_WERT                (RXBUF_UINT32(25))
    #define I3_RES_EDM_STAT_E1_SYSTEMZEIT_PARKEN_WERT_UNIT           's'
    #define I3_RES_EDM_STAT_E1_SYSTEMZEIT_PARKEN_WERT_TYPE           unsigned long
        // Set 1 (last) - time stamp when parking / Satz 1 (letzter) - Zeitstempel beim Parken

    #define I3_RES_EDM_STAT_E2_SYSTEMZEIT_PARKEN_WERT                (RXBUF_UINT32(29))
    #define I3_RES_EDM_STAT_E2_SYSTEMZEIT_PARKEN_WERT_UNIT           's'
    #define I3_RES_EDM_STAT_E2_SYSTEMZEIT_PARKEN_WERT_TYPE           unsigned long
        // Set 2 - Timestamp when parking / Satz 2 - Zeitstempel beim Parken

    #define I3_RES_EDM_STAT_E3_SYSTEMZEIT_PARKEN_WERT                (RXBUF_UINT32(33))
    #define I3_RES_EDM_STAT_E3_SYSTEMZEIT_PARKEN_WERT_UNIT           's'
    #define I3_RES_EDM_STAT_E3_SYSTEMZEIT_PARKEN_WERT_TYPE           unsigned long
        // Sentence 3 - Time stamp when parking / Satz 3 - Zeitstempel beim Parken

    #define I3_RES_EDM_STAT_E4_SYSTEMZEIT_PARKEN_WERT                (RXBUF_UINT32(37))
    #define I3_RES_EDM_STAT_E4_SYSTEMZEIT_PARKEN_WERT_UNIT           's'
    #define I3_RES_EDM_STAT_E4_SYSTEMZEIT_PARKEN_WERT_TYPE           unsigned long
        // Set 4 - Timestamp when parking / Satz 4 - Zeitstempel beim Parken

    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_SOC_PARKEN_WERT          (RXBUF_UCHAR(41)/2.0f)
    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_SOC_PARKEN_WERT_UNIT     '%'
    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_SOC_PARKEN_WERT_TYPE     float
        // Sentence 1 (last) - state of charge of the 12V battery when parking / Satz 1 (letzter) - Ladezustand der
        // 12V-Batterie beim Parken

    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_SOC_PARKEN_WERT          (RXBUF_UCHAR(42)/2.0f)
    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_SOC_PARKEN_WERT_UNIT     '%'
    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_SOC_PARKEN_WERT_TYPE     float
        // Set 2 - Charge level of the 12V battery when parking / Satz 2 - Ladezustand der 12V-Batterie beim Parken

    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_SOC_PARKEN_WERT          (RXBUF_UCHAR(43)/2.0f)
    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_SOC_PARKEN_WERT_UNIT     '%'
    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_SOC_PARKEN_WERT_TYPE     float
        // Set 3 - Charge level of the 12V battery when parking / Satz 3 - Ladezustand der 12V-Batterie beim Parken

    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_SOC_PARKEN_WERT          (RXBUF_UCHAR(44)/2.0f)
    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_SOC_PARKEN_WERT_UNIT     '%'
    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_SOC_PARKEN_WERT_TYPE     float
        // Set 4 - Charge level of the 12V battery when parking / Satz 4 - Ladezustand der 12V-Batterie beim Parken

    #define I3_RES_EDM_STAT_E1_SYSTEMZEIT_LADEBEGINN_WERT            (RXBUF_UINT32(45))
    #define I3_RES_EDM_STAT_E1_SYSTEMZEIT_LADEBEGINN_WERT_UNIT       's'
    #define I3_RES_EDM_STAT_E1_SYSTEMZEIT_LADEBEGINN_WERT_TYPE       unsigned long
        // Set 1 (last) - time stamp when starting the 12V battery charging process / Satz 1 ( letzter) - Zeitstempel
        // beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E2_SYSTEMZEIT_LADEBEGINN_WERT            (RXBUF_UINT32(49))
    #define I3_RES_EDM_STAT_E2_SYSTEMZEIT_LADEBEGINN_WERT_UNIT       's'
    #define I3_RES_EDM_STAT_E2_SYSTEMZEIT_LADEBEGINN_WERT_TYPE       unsigned long
        // Set 2 - Time stamp when starting the 12V battery charging process / Satz 2 - Zeitstempel beim Starten des
        // 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E3_SYSTEMZEIT_LADEBEGINN_WERT            (RXBUF_UINT32(53))
    #define I3_RES_EDM_STAT_E3_SYSTEMZEIT_LADEBEGINN_WERT_UNIT       's'
    #define I3_RES_EDM_STAT_E3_SYSTEMZEIT_LADEBEGINN_WERT_TYPE       unsigned long
        // Set 3 - Timestamp when starting the 12V battery charging process / Satz 3 - Zeitstempel beim Starten des
        // 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E4_SYSTEMZEIT_LADEBEGINN_WERT            (RXBUF_UINT32(57))
    #define I3_RES_EDM_STAT_E4_SYSTEMZEIT_LADEBEGINN_WERT_UNIT       's'
    #define I3_RES_EDM_STAT_E4_SYSTEMZEIT_LADEBEGINN_WERT_TYPE       unsigned long
        // Set 4 - Timestamp when starting the 12V battery charging process / Satz 4 - Zeitstempel beim Starten des
        // 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_SOC_LADEBEGINN_WERT      (RXBUF_UCHAR(61)/2.0f)
    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_SOC_LADEBEGINN_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_SOC_LADEBEGINN_WERT_TYPE float
        // Set 1 (last) - state of charge of the 12V battery when starting the 12V battery charging process / Satz 1
        // (letzter) - Ladezustand der 12V-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_SOC_LADEBEGINN_WERT      (RXBUF_UCHAR(62)/2.0f)
    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_SOC_LADEBEGINN_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_SOC_LADEBEGINN_WERT_TYPE float
        // Set 2 - Charge status of the 12V battery when starting the 12V battery charging process / Satz 2 - Ladezustand
        // der 12V-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_SOC_LADEBEGINN_WERT      (RXBUF_UCHAR(63)/2.0f)
    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_SOC_LADEBEGINN_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_SOC_LADEBEGINN_WERT_TYPE float
        // Set 3 - Charge status of the 12V battery when starting the 12V battery charging process / Satz 3 - Ladezustand
        // der 12V-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_SOC_LADEBEGINN_WERT      (RXBUF_UCHAR(64)/2.0f)
    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_SOC_LADEBEGINN_WERT_UNIT '%'
    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_SOC_LADEBEGINN_WERT_TYPE float
        // Set 4 - Charge status of the 12V battery when starting the 12V battery charging process / Satz 4 - Ladezustand
        // der 12V-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E1_HV_BATTERIE_SOC_LADEBEGINN_WERT       (RXBUF_UCHAR(65)/2.0f)
    #define I3_RES_EDM_STAT_E1_HV_BATTERIE_SOC_LADEBEGINN_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E1_HV_BATTERIE_SOC_LADEBEGINN_WERT_TYPE  float
        // Sentence 1 (last) - state of charge of the high-voltage battery when starting the 12V battery charging process
        // / Satz 1 (letzter) - Ladezustand der Hochvolt-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E2_HV_BATTERIE_SOC_LADEBEGINN_WERT       (RXBUF_UCHAR(66)/2.0f)
    #define I3_RES_EDM_STAT_E2_HV_BATTERIE_SOC_LADEBEGINN_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E2_HV_BATTERIE_SOC_LADEBEGINN_WERT_TYPE  float
        // Sentence 2 - State of charge of the high-voltage battery when starting the 12V battery charging process / Satz
        // 2 - Ladezustand der Hochvolt-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E3_HV_BATTERIE_SOC_LADEBEGINN_WERT       (RXBUF_UCHAR(67)/2.0f)
    #define I3_RES_EDM_STAT_E3_HV_BATTERIE_SOC_LADEBEGINN_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E3_HV_BATTERIE_SOC_LADEBEGINN_WERT_TYPE  float
        // Sentence 3 - State of charge of the high-voltage battery when starting the 12V battery charging process / Satz
        // 3 - Ladezustand der Hochvolt-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E4_HV_BATTERIE_SOC_LADEBEGINN_WERT       (RXBUF_UCHAR(68)/2.0f)
    #define I3_RES_EDM_STAT_E4_HV_BATTERIE_SOC_LADEBEGINN_WERT_UNIT  '%'
    #define I3_RES_EDM_STAT_E4_HV_BATTERIE_SOC_LADEBEGINN_WERT_TYPE  float
        // Sentence 4 - State of charge of the high-voltage battery when starting the 12V battery charging process / Satz
        // 4 - Ladezustand der Hochvolt-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_TEMP_LADEBEGINN_WERT     (RXBUF_SCHAR(69))
    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_TEMP_LADEBEGINN_WERT_UNIT '°C'
    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_TEMP_LADEBEGINN_WERT_TYPE char
        // Set 1 (last) - temperature of the 12V battery when starting the 12V battery charging process / Satz 1
        // (letzter) - Temperatur der 12V-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_TEMP_LADEBEGINN_WERT     (RXBUF_SCHAR(70))
    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_TEMP_LADEBEGINN_WERT_UNIT '°C'
    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_TEMP_LADEBEGINN_WERT_TYPE char
        // Set 2 - Temperature of the 12V battery when starting the 12V battery charging process / Satz 2 - Temperatur
        // der 12V-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_TEMP_LADEBEGINN_WERT     (RXBUF_SCHAR(71))
    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_TEMP_LADEBEGINN_WERT_UNIT '°C'
    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_TEMP_LADEBEGINN_WERT_TYPE char
        // Set 3 - Temperature of the 12V battery when starting the 12V battery charging process / Satz 3 - Temperatur
        // der 12V-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_TEMP_LADEBEGINN_WERT     (RXBUF_SCHAR(72))
    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_TEMP_LADEBEGINN_WERT_UNIT '°C'
    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_TEMP_LADEBEGINN_WERT_TYPE char
        // Set 4 - Temperature of the 12V battery when starting the 12V battery charging process / Satz 4 - Temperatur
        // der 12V-Batterie beim Starten des 12V-Batterie Ladevorgangs

    #define I3_RES_EDM_STAT_E1_LADEDAUER_WERT_0X409D                 (RXBUF_UINT(73))
    #define I3_RES_EDM_STAT_E1_LADEDAUER_WERT_0X409D_UNIT            's'
    #define I3_RES_EDM_STAT_E1_LADEDAUER_WERT_0X409D_TYPE            unsigned short
        // Sentence 1 (last) - charging time (time difference between charging start and charging end) / Satz 1 (letzter)
        // - Ladedauer (Zeitunterschied zwischen Ladebegin und Ladeende)

    #define I3_RES_EDM_STAT_E2_LADEDAUER_WERT_0X409D                 (RXBUF_UINT(75))
    #define I3_RES_EDM_STAT_E2_LADEDAUER_WERT_0X409D_UNIT            's'
    #define I3_RES_EDM_STAT_E2_LADEDAUER_WERT_0X409D_TYPE            unsigned short
        // Sentence 2 - charging time (time difference between charging start and charging end) / Satz 2 - Ladedauer
        // (Zeitunterschied zwischen Ladebegin und Ladeende)

    #define I3_RES_EDM_STAT_E3_LADEDAUER_WERT_0X409D                 (RXBUF_UINT(77))
    #define I3_RES_EDM_STAT_E3_LADEDAUER_WERT_0X409D_UNIT            's'
    #define I3_RES_EDM_STAT_E3_LADEDAUER_WERT_0X409D_TYPE            unsigned short
        // Sentence 3 - charging time (time difference between charging start and charging end) / Satz 3 - Ladedauer
        // (Zeitunterschied zwischen Ladebegin und Ladeende)

    #define I3_RES_EDM_STAT_E4_LADEDAUER_WERT_0X409D                 (RXBUF_UINT(79))
    #define I3_RES_EDM_STAT_E4_LADEDAUER_WERT_0X409D_UNIT            's'
    #define I3_RES_EDM_STAT_E4_LADEDAUER_WERT_0X409D_TYPE            unsigned short
        // Sentence 4 - charging time (time difference between charging start and charging end) / Satz 4 - Ladedauer
        // (Zeitunterschied zwischen Ladebegin und Ladeende)

    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_SOC_LADEENDE_WERT        (RXBUF_UCHAR(81)/2.0f)
    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_SOC_LADEENDE_WERT_UNIT   '%'
    #define I3_RES_EDM_STAT_E1_12V_BATTERIE_SOC_LADEENDE_WERT_TYPE   float
        // Sentence 1 (last) - state of charge of the 12V battery when the 12V battery charging process is ended (= state
        // of charge when starting if charging is not possible) / Satz 1 (letzter) - Ladezustand der 12V-Batterie beim
        // Beenden des 12V-Batterie Ladevorgangs (=Ladezustand beim Starten wenn Laden nicht möglich)

    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_SOC_LADEENDE_WERT        (RXBUF_UCHAR(82)/2.0f)
    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_SOC_LADEENDE_WERT_UNIT   '%'
    #define I3_RES_EDM_STAT_E2_12V_BATTERIE_SOC_LADEENDE_WERT_TYPE   float
        // Sentence 2 - Charge status of the 12V battery when the 12V battery charging process is ended (= charge status
        // when starting if charging is not possible) / Satz 2 - Ladezustand der 12V-Batterie beim Beenden des
        // 12V-Batterie Ladevorgangs (=Ladezustand beim Starten wenn Laden nicht möglich)

    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_SOC_LADEENDE_WERT        (RXBUF_UCHAR(83)/2.0f)
    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_SOC_LADEENDE_WERT_UNIT   '%'
    #define I3_RES_EDM_STAT_E3_12V_BATTERIE_SOC_LADEENDE_WERT_TYPE   float
        // Sentence 3 - Charge status of the 12V battery when the 12V battery charging process is ended (= charge status
        // when starting if charging is not possible) / Satz 3 - Ladezustand der 12V-Batterie beim Beenden des
        // 12V-Batterie Ladevorgangs (=Ladezustand beim Starten wenn Laden nicht möglich)

    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_SOC_LADEENDE_WERT        (RXBUF_UCHAR(84)/2.0f)
    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_SOC_LADEENDE_WERT_UNIT   '%'
    #define I3_RES_EDM_STAT_E4_12V_BATTERIE_SOC_LADEENDE_WERT_TYPE   float
        // Sentence 4 - Charge status of the 12V battery when the 12V battery charging process is ended (= charge status
        // when starting if charging is not possible) / Satz 4 - Ladezustand der 12V-Batterie beim Beenden des
        // 12V-Batterie Ladevorgangs (=Ladezustand beim Starten wenn Laden nicht möglich)

    #define I3_RES_EDM_STAT_E1_HV_BATTERIE_SOC_LADEENDE_WERT         (RXBUF_UCHAR(85)/2.0f)
    #define I3_RES_EDM_STAT_E1_HV_BATTERIE_SOC_LADEENDE_WERT_UNIT    '%'
    #define I3_RES_EDM_STAT_E1_HV_BATTERIE_SOC_LADEENDE_WERT_TYPE    float
        // Sentence 1 (last) - state of charge of the high-voltage battery when the 12V battery charging process is ended
        // (= state of charge when starting if charging is not possible) / Satz 1 (letzter) - Ladezustand der
        // Hochvolt-Batterie beim Beenden des 12V-Batterie Ladevorgangs (=Ladezustand beim Starten wenn Laden nicht
        // möglich)

    #define I3_RES_EDM_STAT_E2_HV_BATTERIE_SOC_LADEENDE_WERT         (RXBUF_UCHAR(86)/2.0f)
    #define I3_RES_EDM_STAT_E2_HV_BATTERIE_SOC_LADEENDE_WERT_UNIT    '%'
    #define I3_RES_EDM_STAT_E2_HV_BATTERIE_SOC_LADEENDE_WERT_TYPE    float
        // Sentence 2 - Charge status of the high-voltage battery when the 12V battery charging process is ended (=
        // charge status when starting if charging is not possible) / Satz 2 - Ladezustand der Hochvolt-Batterie beim
        // Beenden des 12V-Batterie Ladevorgangs (=Ladezustand beim Starten wenn Laden nicht möglich)

    #define I3_RES_EDM_STAT_E3_HV_BATTERIE_SOC_LADEENDE_WERT         (RXBUF_UCHAR(87)/2.0f)
    #define I3_RES_EDM_STAT_E3_HV_BATTERIE_SOC_LADEENDE_WERT_UNIT    '%'
    #define I3_RES_EDM_STAT_E3_HV_BATTERIE_SOC_LADEENDE_WERT_TYPE    float
        // Sentence 3 - State of charge of the high-voltage battery when the 12V battery charging process is ended (=
        // state of charge when starting if charging is not possible) / Satz 3 - Ladezustand der Hochvolt-Batterie beim
        // Beenden des 12V-Batterie Ladevorgangs (=Ladezustand beim Starten wenn Laden nicht möglich)

    #define I3_RES_EDM_STAT_E4_HV_BATTERIE_SOC_LADEENDE_WERT         (RXBUF_UCHAR(88)/2.0f)
    #define I3_RES_EDM_STAT_E4_HV_BATTERIE_SOC_LADEENDE_WERT_UNIT    '%'
    #define I3_RES_EDM_STAT_E4_HV_BATTERIE_SOC_LADEENDE_WERT_TYPE    float
        // Sentence 4 - Charge status of the high-voltage battery when the 12V battery charging process is ended (=
        // charge status when starting if charging is not possible) / Satz 4 - Ladezustand der Hochvolt-Batterie beim
        // Beenden des 12V-Batterie Ladevorgangs (=Ladezustand beim Starten wenn Laden nicht möglich)

    #define I3_RES_EDM_STAT_E1_12VLADEFEHLER                         (RXBUF_UCHAR(89))
    #define I3_RES_EDM_STAT_E1_12VLADEFEHLER_UNIT                    '0-n'
    #define I3_RES_EDM_STAT_E1_12VLADEFEHLER_TYPE                    unsigned char
        // Sentence 1 (last) - reason for the end of loading / Satz 1 (letzter) - Ladeendegrund

    #define I3_RES_EDM_STAT_E2_12VLADEFEHLER                         (RXBUF_UCHAR(90))
    #define I3_RES_EDM_STAT_E2_12VLADEFEHLER_UNIT                    '0-n'
    #define I3_RES_EDM_STAT_E2_12VLADEFEHLER_TYPE                    unsigned char
        // Sentence 2 - Reason for end of loading / Satz 2 - Ladeendegrund

    #define I3_RES_EDM_STAT_E3_12VLADEFEHLER                         (RXBUF_UCHAR(91))
    #define I3_RES_EDM_STAT_E3_12VLADEFEHLER_UNIT                    '0-n'
    #define I3_RES_EDM_STAT_E3_12VLADEFEHLER_TYPE                    unsigned char
        // Sentence 3 - Reason for end of loading / Satz 3 - Ladeendegrund

    #define I3_RES_EDM_STAT_E4_12VLADEFEHLER                         (RXBUF_UCHAR(92))
    #define I3_RES_EDM_STAT_E4_12VLADEFEHLER_UNIT                    '0-n'
    #define I3_RES_EDM_STAT_E4_12VLADEFEHLER_TYPE                    unsigned char
        // Sentence 4 - Reason for end of loading / Satz 4 - Ladeendegrund

#define I3_PID_EDM_12V_NACHLADEHISTOGRAMM                            0x409E
        // Reading out the histograms for the 12V recharge function / Auslesen der Histogramme für 12V Nachladefunktion

    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_A_WERT (RXBUF_UCHAR(0))
    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_A_WERT_TYPE unsigned char
        // Number of idle times until the start of the cyclical reloading in area A. Area A <= K_STDZEITLADEHISTGRZ1 (2
        // days) (counting up to 255, then no counting, value is retained) / Anzahl der Standzeiten bis zum Beginn des
        // zyklischen Nachladens im Bereich A. Bereich A <= K_STDZEITLADEHISTGRZ1 (2 Tage) (Zählung bis 255, danach keine
        // Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_B_WERT (RXBUF_UCHAR(1))
    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_B_WERT_TYPE unsigned char
        // Number of idle times until the start of cyclical reloading in area B. K_STDZEITLADEHISTGRZ1 (2 days) <area B
        // <= K_STDZEITLADEHISTGRZ2 (4 days) (counting up to 255, then no counting, value is retained) / Anzahl der
        // Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich B.   K_STDZEITLADEHISTGRZ1 (2 Tage) < Bereich
        // B <= K_STDZEITLADEHISTGRZ2 (4 Tage)  (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_C_WERT (RXBUF_UCHAR(2))
    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_C_WERT_TYPE unsigned char
        // Number of idle times until the start of the cyclical reloading in area C. K_STDZEITLADEHISTGRZ2 (4 days) <area
        // C <= K_STDZEITLADEHISTGRZ3 (6 days) (count up to 255, after that no count, value is retained) / Anzahl der
        // Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich C.  K_STDZEITLADEHISTGRZ2 (4 Tage) < Bereich C
        // <= K_STDZEITLADEHISTGRZ3 (6 Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_D_WERT (RXBUF_UCHAR(3))
    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_D_WERT_TYPE unsigned char
        // Number of idle times until the start of cyclical reloading in area D. K_STDZEITLADEHISTGRZ3 (6 days) <area D
        // <= K_STDZEITLADEHISTGRZ4 (10 days) (counting up to 255, after that no counting, value is retained) / Anzahl
        // der Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich D.  K_STDZEITLADEHISTGRZ3 (6 Tage) <
        // Bereich D <= K_STDZEITLADEHISTGRZ4 (10 Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_E_WERT (RXBUF_UCHAR(4))
    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_E_WERT_TYPE unsigned char
        // Number of idle times until the start of cyclical reloading in area E. K_STDZEITLADEHISTGRZ4 (10 days) <area E
        // <= K_STDZEITLADEHISTGRZ5 (14 days) (counting up to 255, then no counting, value is retained) / Anzahl der
        // Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich E.  K_STDZEITLADEHISTGRZ4 (10 Tage) < Bereich
        // E <= K_STDZEITLADEHISTGRZ5 (14 Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_F_WERT (RXBUF_UCHAR(5))
    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_F_WERT_TYPE unsigned char
        // Number of idle times until the beginning of the cyclical reloading in the area F. K_STDZEITLADEHISTGRZ5 (14
        // days) <area F <= K_STDZEITLADEHISTGRZ6 (21 days) (count up to 255, after that no count, value is retained) /
        // Anzahl der Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich F.  K_STDZEITLADEHISTGRZ5 (14 Tage)
        // < Bereich F <= K_STDZEITLADEHISTGRZ6 (21 Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_G_WERT (RXBUF_UCHAR(6))
    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_G_WERT_TYPE unsigned char
        // Number of idle times until the start of cyclical reloading in area G. K_STDZEITLADEHISTGRZ6 (21 days) <area G
        // <= K_STDZEITLADEHISTGRZ7 (28 days) (counts up to 255, then no count, value is retained) / Anzahl der
        // Standzeiten bis zum Beginn des zyklischen Nachladens im Bereich G.  K_STDZEITLADEHISTGRZ6 (21 Tage) < Bereich
        // G <= K_STDZEITLADEHISTGRZ7 (28 Tage) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_H_WERT (RXBUF_UCHAR(7))
    #define I3_RES_EDM_STAT_HFK_STANDZEIT_BIS_LADEBEGINN_BEREICH_H_WERT_TYPE unsigned char
        // Number of idle times until the start of the cyclical reloading in area H. K_STDZEITLADEHISTGRZ7 (28 days)
        // <area H (counting up to 255, then no counting, value is retained) / Anzahl der Standzeiten bis zum Beginn des
        // zyklischen Nachladens im Bereich H.  K_STDZEITLADEHISTGRZ7 (28 Tage) < Bereich H (Zählung bis 255, danach
        // keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_A_WERT             (RXBUF_UCHAR(8))
    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_A_WERT_TYPE        unsigned char
        // Number of loading times of the cyclical reloading in area A. Area A <= K_NLDDAUERHISTGRZ1 (3 minutes)
        // (counting up to 255, then no counting, value is retained) / Anzahl der Ladungsdauer des zyklischen Nachladens
        // im Bereich A.  Bereich A <= K_NLDDAUERHISTGRZ1 (3 Minuten)  (Zählung bis 255, danach keine Zählung, Wert
        // bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_B_WERT             (RXBUF_UCHAR(9))
    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_B_WERT_TYPE        unsigned char
        // Number of loading times of the cyclical reloading in area B. K_NLDDAUERHISTGRZ1 (3 minutes) <area B <=
        // K_NLDDAUERHISTGRZ2 (6 minutes) (count up to 255, then no count, value is retained) / Anzahl der Ladungsdauer
        // des zyklischen Nachladens im Bereich B.   K_NLDDAUERHISTGRZ1 (3 Minuten) < Bereich B <= K_NLDDAUERHISTGRZ2 (6
        // Minuten) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_C_WERT             (RXBUF_UCHAR(10))
    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_C_WERT_TYPE        unsigned char
        // Number of loading times of the cyclical reloading in area C. K_NLDDAUERHISTGRZ2 (6 minutes) <area C <=
        // K_NLDDAUERHISTGRZ3 (10 minutes) (counting up to 255, after that no counting, value is retained) / Anzahl der
        // Ladungsdauer des zyklischen Nachladens im Bereich C.   K_NLDDAUERHISTGRZ2 (6 Minuten) < Bereich C <=
        // K_NLDDAUERHISTGRZ3 (10 Minuten) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_D_WERT             (RXBUF_UCHAR(11))
    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_D_WERT_TYPE        unsigned char
        // Number of loading times of the cyclical reloading in area D. K_NLDDAUERHISTGRZ3 (10 minutes) <area D <=
        // K_NLDDAUERHISTGRZ4 (15 minutes) (counting up to 255, after that no counting, value is retained) / Anzahl der
        // Ladungsdauer des zyklischen Nachladens im Bereich D.   K_NLDDAUERHISTGRZ3 (10 Minuten) < Bereich D <=
        // K_NLDDAUERHISTGRZ4 (15 Minuten) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_E_WERT             (RXBUF_UCHAR(12))
    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_E_WERT_TYPE        unsigned char
        // Number of loading times of the cyclical reloading in area E. K_NLDDAUERHISTGRZ4 (15 minutes) <area E <=
        // K_NLDDAUERHISTGRZ5 (20 minutes) (counting up to 255, after that no counting, value is retained) / Anzahl der
        // Ladungsdauer des zyklischen Nachladens im Bereich E.   K_NLDDAUERHISTGRZ4 (15 Minuten) < Bereich E <=
        // K_NLDDAUERHISTGRZ5 (20 Minuten) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_F_WERT             (RXBUF_UCHAR(13))
    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_F_WERT_TYPE        unsigned char
        // Number of loading times of the cyclical reloading in the area F. K_NLDDAUERHISTGRZ5 (20 minutes) <area F <=
        // K_NLDDAUERHISTGRZ6 (28 minutes) (counting up to 255, then no counting, value is retained) / Anzahl der
        // Ladungsdauer des zyklischen Nachladens im Bereich F.   K_NLDDAUERHISTGRZ5 (20 Minuten) < Bereich F <=
        // K_NLDDAUERHISTGRZ6 (28 Minuten) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_G_WERT             (RXBUF_UCHAR(14))
    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_G_WERT_TYPE        unsigned char
        // Number of loading times of the cyclical reloading in area G. K_NLDDAUERHISTGRZ6 (28 minutes) <area F <=
        // K_NLDDAUERHISTGRZ7 (45 minutes) (counting up to 255, after that no counting, value is retained) / Anzahl der
        // Ladungsdauer des zyklischen Nachladens im Bereich G.   K_NLDDAUERHISTGRZ6 (28 Minuten) < Bereich F <=
        // K_NLDDAUERHISTGRZ7 (45 Minuten) (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_H_WERT             (RXBUF_UCHAR(15))
    #define I3_RES_EDM_STAT_HFK_LADEDAUER_BEREICH_H_WERT_TYPE        unsigned char
        // Number of loading times of the cyclical reloading in area H. K_NLDDAUERHISTGRZ7 (45 minutes) <area H (counting
        // up to 255, then no counting, value is retained) / Anzahl der Ladungsdauer des zyklischen Nachladens im Bereich
        // H. K_NLDDAUERHISTGRZ7 (45 Minuten) < Bereich H (Zählung bis 255, danach keine Zählung, Wert bleibt erhalten)

#define I3_PID_EDM_STATUS_E_S_KL_15_WUP                              0x4101
        // Wakeup Line (E_S_KL15_WUP) / Wakeup Line (E_S_KL15_WUP)

    #define I3_RES_EDM_STAT_E_S_KL15_WUP                             (RXBUF_UINT(0))
    #define I3_RES_EDM_STAT_E_S_KL15_WUP_UNIT                        '0/1'
    #define I3_RES_EDM_STAT_E_S_KL15_WUP_TYPE                        unsigned short
        // Wakeup Line (E_S_KL15_WUP) / Wakeup Line (E_S_KL15_WUP)

#define I3_PID_EDM_STATUS_E_A_PWG1_RAW                               0x4102
        // Pedal position sensor 1 raw / Pedal Position Sensor 1 raw

    #define I3_RES_EDM_STAT_E_A_PWG1_RAW_WERT                        (RXBUF_UINT(0)*5.0f/1024.0f)
    #define I3_RES_EDM_STAT_E_A_PWG1_RAW_WERT_UNIT                   'V'
    #define I3_RES_EDM_STAT_E_A_PWG1_RAW_WERT_TYPE                   float
        // Pedal position sensor 1 raw / Pedal Position Sensor 1 raw

#define I3_PID_EDM_STATUS_E_A_PWG2_RAW                               0x4103
        // Pedal position sensor 2 raw / Pedal Position Sensor 2 raw

    #define I3_RES_EDM_STAT_E_A_PWG2_RAW_WERT                        (RXBUF_UINT(0)*5.0f/1024.0f)
    #define I3_RES_EDM_STAT_E_A_PWG2_RAW_WERT_UNIT                   'V'
    #define I3_RES_EDM_STAT_E_A_PWG2_RAW_WERT_TYPE                   float
        // Pedal position sensor 2 raw / Pedal Position Sensor 2 raw

#define I3_PID_EDM_STATUS_E_A_TMEL_RAW                               0x4104
        // Engine temperature raw / Engine Temperatur raw

    #define I3_RES_EDM_STAT_E_A_TMEL_RAW_WERT                        (RXBUF_UINT(0)*5.0f/4096.0f)
    #define I3_RES_EDM_STAT_E_A_TMEL_RAW_WERT_UNIT                   'V'
    #define I3_RES_EDM_STAT_E_A_TMEL_RAW_WERT_TYPE                   float
        // Engine temperature raw / Engine Temperatur raw

#define I3_PID_EDM_STATUS_BATTERIE_VOLTAGE_RAUS                      0x4105
        // Battery voltage raw / Batterie Voltage raw

    #define I3_RES_EDM_STAT_BATTERY_VOLTAGE_RAW_WERT                 (RXBUF_UINT(0)*5.0f/4095.0f)
    #define I3_RES_EDM_STAT_BATTERY_VOLTAGE_RAW_WERT_UNIT            'V'
    #define I3_RES_EDM_STAT_BATTERY_VOLTAGE_RAW_WERT_TYPE            float
        // Battery voltage raw / Batterie Voltage raw

#define I3_PID_EDM_STATUS_A_U_PWG1                                   0x4106
        // 5 V supply 1 / 5 V Supply 1

    #define I3_RES_EDM_STAT_A_U_PWG1_WERT                            (RXBUF_UINT(0)/128.0f)
    #define I3_RES_EDM_STAT_A_U_PWG1_WERT_UNIT                       'V'
    #define I3_RES_EDM_STAT_A_U_PWG1_WERT_TYPE                       float
        // 5 V supply 1 / 5 V Supply 1

#define I3_PID_EDM_STATUS_A_U_PWG2                                   0x4107
        // 5 V supply 2 / 5 V Supply 2

    #define I3_RES_EDM_STAT_A_U_PWG2_WERT                            (RXBUF_UINT(0)/128.0f)
    #define I3_RES_EDM_STAT_A_U_PWG2_WERT_UNIT                       'V'
    #define I3_RES_EDM_STAT_A_U_PWG2_WERT_TYPE                       float
        // 5 V supply 2 / 5 V Supply 2

#define I3_PID_EDM_STATUS_E_A_MEL                                    0x4109
        // Voltage Fan 2 raw / Voltage Fan 2 raw

    #define I3_RES_EDM_STAT_E_A_MEL_WERT                             (RXBUF_UINT(0)*12.5113f/4095.0f)
    #define I3_RES_EDM_STAT_E_A_MEL_WERT_UNIT                        'V'
    #define I3_RES_EDM_STAT_E_A_MEL_WERT_TYPE                        float
        // Voltage Fan 2 raw / Voltage Fan 2 raw

#define I3_PID_EDM_STATUS_ECU_MICRO_TEMPERATUR                       0x410A
        // Ecu micro temperature / Ecu micro Temperatur

    #define I3_RES_EDM_STAT_ECU_MICRO_TEMPERATUR_WERT                (RXBUF_SINT(0))
    #define I3_RES_EDM_STAT_ECU_MICRO_TEMPERATUR_WERT_UNIT           '°C'
    #define I3_RES_EDM_STAT_ECU_MICRO_TEMPERATUR_WERT_TYPE           short
        // Ecu micro temperature / Ecu micro Temperatur

#define I3_PID_EDM_STATUS_E_A_TMEL2_RAW                              0x410B
        // E_A_TMEL2 / E_A_TMEL2

    #define I3_RES_EDM_STAT__WERT                                    (RXBUF_UINT(0)*5.0f/1023.0f)
    #define I3_RES_EDM_STAT__WERT_UNIT                               'V'
    #define I3_RES_EDM_STAT__WERT_TYPE                               float
        // E_A_TMEL2 / E_A_TMEL2

// Skipping _STEUERN_E_A_TMEL on 0x4114 which takes arguments

// Skipping _STEUERN_BATTERY_VOLTAGE_RAW on 0x4115 which takes arguments

// Skipping _STEUERN_A_U_PWG1 on 0x4116 which takes arguments

// Skipping _STEUERN_A_U_PWG2 on 0x4117 which takes arguments

// Skipping _STEUERN_VOLTAGE_FAN_2 on 0x4119 which takes arguments

// Skipping _STEUERN_ECU_MICRO_TEMPERATUR on 0x411A which takes arguments

// Skipping _STEUERN_TMEL2 on 0x411B which takes arguments

#define I3_PID_EDM_STATUS_A_S_ELRLY                                  0x4120
        // Status Electric Fan Relay / Status Electric Fan Relais

    #define I3_RES_EDM_STAT_A_S_ELRLY                                (RXBUF_UINT(0))
    #define I3_RES_EDM_STAT_A_S_ELRLY_UNIT                           '0/1'
    #define I3_RES_EDM_STAT_A_S_ELRLY_TYPE                           unsigned short
        // Status Electric Fan Relay / Status Electric Fan Relais

#define I3_PID_EDM_STATUS_A_T_ELUE                                   0x4121
        // Status Electric Fan Module / Status Electric Fan Module

    #define I3_RES_EDM_STAT_A_T_ELUE_WERT                            (RXBUF_UINT(0)*100.0f/65535.0f)
    #define I3_RES_EDM_STAT_A_T_ELUE_WERT_UNIT                       '%'
    #define I3_RES_EDM_STAT_A_T_ELUE_WERT_TYPE                       float
        // Status Electric Fan Module / Status Electric Fan Module

#define I3_PID_EDM_STATUS_A_T_EWP                                    0x4122
        // Water pump / Water Pump

    #define I3_RES_EDM_STAT_A_T_EWAP_WERT                            (RXBUF_UINT(0)*100.0f/65535.0f)
    #define I3_RES_EDM_STAT_A_T_EWAP_WERT_UNIT                       '%'
    #define I3_RES_EDM_STAT_A_T_EWAP_WERT_TYPE                       float
        // Water pump / Water Pump

#define I3_PID_EDM_STATUS_A_S_KV1                                    0x4123
        // Expansion Valve / Expansion Valve

    #define I3_RES_EDM_STAT_A_S_KV1                                  (RXBUF_UINT(0))
    #define I3_RES_EDM_STAT_A_S_KV1_UNIT                             '0/1'
    #define I3_RES_EDM_STAT_A_S_KV1_TYPE                             unsigned short
        // Expansion Valve / Expansion Valve

#define I3_PID_EDM_STATUS_A_S_KV2                                    0x4124
        // Shutoff valve / Shutoff Valve

    #define I3_RES_EDM_STAT_A_S_KV2                                  (RXBUF_UINT(0))
    #define I3_RES_EDM_STAT_A_S_KV2_UNIT                             '0/1'
    #define I3_RES_EDM_STAT_A_S_KV2_TYPE                             unsigned short
        // Shutoff valve / Shutoff Valve

#define I3_PID_EDM_STATUS_A_S_MEL                                    0x4125
        // Fan relay 2 / Fan Relais 2

    #define I3_RES_EDM_STAT_A_S_MEL                                  (RXBUF_UINT(0))
    #define I3_RES_EDM_STAT_A_S_MEL_UNIT                             '0/1'
    #define I3_RES_EDM_STAT_A_S_MEL_TYPE                             unsigned short
        // Fan relay 2 / Fan Relais 2

// Skipping _STEUERN_A_S_ELRLY on 0x4140 which takes arguments

// Skipping _STEUERN_A_T_ELUE on 0x4141 which takes arguments

// Skipping _STEUERN_A_T_EWP on 0x4142 which takes arguments

// Skipping STEUERN_A_S_KV1 on 0x4143 which takes arguments

// Skipping _STEUERN_A_S_KV2 on 0x4144 which takes arguments

// Skipping _STEUERN_A_S_MEL on 0x4145 which takes arguments

#define I3_PID_EDM_STATUS_E_A_PWG1                                   0x4182
        // Pedal position sensor 1 filtered / Pedal Position Sensor 1 filtered

    #define I3_RES_EDM_STAT_E_A_PWG1_FILTERED_WERT                   (RXBUF_UINT(0)/128.0f)
    #define I3_RES_EDM_STAT_E_A_PWG1_FILTERED_WERT_UNIT              '%'
    #define I3_RES_EDM_STAT_E_A_PWG1_FILTERED_WERT_TYPE              float
        // Pedal position sensor 1 filtered / Pedal Position Sensor 1 filtered

#define I3_PID_EDM_STATUS_E_A_PWG2_FILTERED                          0x4183
        // Pedal position sensor 2 filtered / Pedal position sensor 2 filtered

    #define I3_RES_EDM_STAT_E_A_PWG2_FILTERED_WERT                   (RXBUF_UINT(0)/128.0f)
    #define I3_RES_EDM_STAT_E_A_PWG2_FILTERED_WERT_UNIT              '%'
    #define I3_RES_EDM_STAT_E_A_PWG2_FILTERED_WERT_TYPE              float
        // Pedal position sensor 2 filtered / Pedal position sensor 2 filtered

#define I3_PID_EDM_STATUS_TEMPERATUR_SENSOR_1                        0x4184
        // Temperature value of the first temperature sensor in the engine compartment / Temperaturwert des ersten
        // Temperatursensors im Motorraum

    #define I3_RES_EDM_STAT_TEMPERATUR_TEMPERATURSENSOR_1_WERT       (RXBUF_SINT(0)/100.0f)
    #define I3_RES_EDM_STAT_TEMPERATUR_TEMPERATURSENSOR_1_WERT_UNIT  '°C'
    #define I3_RES_EDM_STAT_TEMPERATUR_TEMPERATURSENSOR_1_WERT_TYPE  float
        // Temperature value of the first temperature sensor in the engine compartment / Temperaturwert des ersten
        // Temperatursensors im Motorraum

#define I3_PID_EDM_STATUS_BATTERY_VOLTAGE_FILTERED                   0x4185
        // Battery voltage filtered / Battery Voltage filtered

    #define I3_RES_EDM_STAT_BATTERY_VOLTAGE_FILTERED_WERT            (RXBUF_SINT(0)/128.0f)
    #define I3_RES_EDM_STAT_BATTERY_VOLTAGE_FILTERED_WERT_UNIT       'V'
    #define I3_RES_EDM_STAT_BATTERY_VOLTAGE_FILTERED_WERT_TYPE       float
        // Battery voltage filtered / Battery Voltage filtered

#define I3_PID_EDM_STATUS_TEMPERATUR_SENSOR_2                        0x418B
        // Temperature value of the second temperature sensor in the engine compartment / Temperaturwert des zweiten
        // Temperatursensors im Motorraum

    #define I3_RES_EDM_STAT_TEMPERATUR_TEMPERATURSENSOR_2_WERT       (RXBUF_SINT(0)/100.0f)
    #define I3_RES_EDM_STAT_TEMPERATUR_TEMPERATURSENSOR_2_WERT_UNIT  '°C'
    #define I3_RES_EDM_STAT_TEMPERATUR_TEMPERATURSENSOR_2_WERT_TYPE  float
        // Temperature value of the second temperature sensor in the engine compartment / Temperaturwert des zweiten
        // Temperatursensors im Motorraum

// Skipping AKKS_INPUTOUTPUTCONTROL on 0x60C3 which takes arguments

// Skipping _AEP_GRUND_LADEENDE on 0x63F0 which takes arguments

// Skipping _AEP_TEST_BATTERY_GUARD on 0xF000 which takes arguments

// Skipping STEUERN_BETRIEBSART_EM1 on 0xF086 which takes arguments

// Skipping STEUERN_BETRIEBSART_EM2 on 0xF087 which takes arguments

#define I3_PID_EDM_STEUERN_AKKS                                      0xF0D5
        // Controlling the active cooling flap / Steuern der aktiven Kühlklappe

    #define I3_RES_EDM_STAT_AKKS_SMOTPOAKKSLIN_WERT                  (RXBUF_UINT(0))
    #define I3_RES_EDM_STAT_AKKS_SMOTPOAKKSLIN_WERT_TYPE             unsigned short
        // Target position in steps / Sollposition in Schritten

    #define I3_RES_EDM_STAT_AKKS_IS_POS_LIN_WERT                     (RXBUF_UINT(2))
    #define I3_RES_EDM_STAT_AKKS_IS_POS_LIN_WERT_TYPE                unsigned short
        // Actual position in steps / Istposition in Schritten

    #define I3_RES_EDM_STAT_AKKS_DSRD_POS_ANGLE_WERT                 (RXBUF_SCHAR(4))
    #define I3_RES_EDM_STAT_AKKS_DSRD_POS_ANGLE_WERT_TYPE            char
        // Target position in degrees / Sollposition in Grad

    #define I3_RES_EDM_STAT_AKKS_ACT_POS_ANGLE_WERT                  (RXBUF_SCHAR(5))
    #define I3_RES_EDM_STAT_AKKS_ACT_POS_ANGLE_WERT_TYPE             char
        // Actual position in degrees / Istposition in Grad

    // BF_AKKS_ERROR is a BITFIELD of size unsigned char.  We don't yet generate definitions for each bit, we treat as the host data type
        // General diagnosis status / Diagnosestatus allgemein
            // STAT_AKKS_ERROR: Mask: 0x01 - indicates if an error is present
            // STAT_AKKS_DIAG_DONE_NO_MESS: Mask: 0x02 - indicates the no message diagnostic required time is over
            // STAT_AKKS_DIAG_DONE_LOW_FLAP: Mask: 0x04 - indicates the low flap diagnostic required time is over
    #define I3_RES_EDM_BF_AKKS_ERROR                                 (RXBUF_UCHAR(6))
    #define I3_RES_EDM_BF_AKKS_ERROR_UNIT                            'Bit'
    #define I3_RES_EDM_BF_AKKS_ERROR_TYPE                            unsigned char
        // General diagnosis status / Diagnosestatus allgemein

    #define I3_RES_EDM_STAT_VRSAKKLIN_WERT                           (RXBUF_UCHAR(7))
    #define I3_RES_EDM_STAT_VRSAKKLIN_WERT_TYPE                      unsigned char
        // Variant info from the operator / Varianteninfo vom Steller
